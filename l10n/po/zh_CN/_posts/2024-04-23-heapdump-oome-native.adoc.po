msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid "Obtaining heap dump on OutOfMemoryError with Quarkus native"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid "Generating and inspecting heap dumps in Quarkus native when `OutOfMemoryError` errors occur"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid ""
"Starting with GraalVM for JDK 21,\n"
"native executables can run with the `-XX:+HeapDumpOnOutOfMemoryError` option to generate a heap dump when a `java.lang.OutOfMemoryError` is thrown.\n"
"In this blog post we will explore how to use the flag,\n"
"we will inspect what a GraalVM Native Image heap dump looks like and how it compares with one produced by HotSpot."
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid ""
"Note: The heap of GraalVM Native Image executables has both read-only and read-write segments.\n"
"The read-only part is referred to as the \"image heap\" and contains the data pre-initialized during the image build to help speed up start-up time.\n"
"The read-write part is where allocations at runtime are made.\n"
"Therefore, heap dumps generated at runtime will contain content from both the \"image heap\" and the read-write heap."
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid ""
"To see this flag in action, we need to manufacture a situation where a Quarkus application runs out of memory.\n"
"One easy way to achieve this is to configure the application with a garbage collector that doesn't do any memory reclamation,\n"
"i.e. the Epsilon GC.\n"
"Once the Quarkus application is running with Epsilon GC,\n"
"apply some load and within a short space of time it will run out of memory and produce a heap dump."
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid ""
"Let’s do this using a Quarkus application that simply responds to an HTTP endpoint request as a starting point.\n"
"The sample application can be downloaded from\n"
"https://code.quarkus.io[code.quarkus.io] using a browser\n"
"or via the command line:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid "Next, build a Quarkus native executable with GraalVM for JDK 21 configuring it to use Epsilon GC:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid "Note: The GC selection needs to be done at build time for Quarkus native applications."
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid "While the Quarkus native executable is being produced you will be able to observe that GC is indeed configured to be EpsilonGC:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid ""
"Once the build completes,\n"
"start Quarkus with `-XX:+HeapDumpOnOutOfMemoryError -XX:+ExitOnOutOfMemoryError`.\n"
"The latter forces the application to shutdown when an `OutOfMemoryError` occurs rather than leave the process in an indeterminate state:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid "Next, apply some load to the HTTP endpoint exposed by the Quarkus application, for example using `curl` in a bash loop:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid ""
"Switching to the Quarkus console,\n"
"an `OutOfMemoryError` would be observed along with some messages indicating that a heap dump is being produced:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid ""
"Multiple graphical tools exist out there to inspect heap dumps,\n"
"such as https://visualvm.github.io/[VisualVM],\n"
"https://eclipse.dev/mat/[Eclipse Memory Analyzer (MAT)], etc.,\n"
"but some new ones are also available that you can run in the command line to get a quick picture of the heap dump,\n"
"for example\n"
"https://github.com/openjdk/jol[Java Object Layout (JOL)]:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid ""
"The presence of SubstrateVM,\n"
"the VM that powers native images built with GraalVM,\n"
"can be clearly observed because of the instances of `com.oracle.svm.core.monitor.JavaMonitor` present in the heap dump.\n"
"What would the heap dump look like if we repeat exactly the same exercise but instead we use Quarkus JVM mode? Let’s see:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid "Rebuild the Quarkus app for JVM mode and run it with Epsilon GC:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid "After applying the same load, you would observe the heap dump being generated in JVM mode as well:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid "And this is what the heap dump looks like with JOL:"
msgstr ""

#: _posts/2024-04-23-heapdump-oome-native.adoc
msgid ""
"As expected, no SubstrateVM classes are present in this heap dump,\n"
"leaving only Quarkus, Vert.x and OpenJDK types in the heap dump."
msgstr ""

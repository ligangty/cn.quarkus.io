# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-08-02 18:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-orm-panache.adoc:6
#, no-wrap
msgid "Simplified Hibernate ORM with Panache"
msgstr "使用Panache简化Hibernate ORM"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:15
#, fuzzy
msgid "Hibernate ORM is the de facto Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "Hibernate ORM是事实上的JPA实现，提供了全方位的对象关系映射（Object Relational Mapper，简称ORM）支持。它支持编写复杂的映射，但编写简单常用的映射却不够简便。Panache专注于简化Hibernate ORM实体，让你的Quarkus开发有趣。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:16
#, no-wrap
msgid "First: an example"
msgstr "首先看一个例子"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:19
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr "Panache允许这样编写Hibernate ORM实体："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:23
#: upstream/_guides/hibernate-orm-panache.adoc:33
#: upstream/_guides/hibernate-orm-panache.adoc:172
#: upstream/_guides/hibernate-orm-panache.adoc:192
#: upstream/_guides/hibernate-orm-panache.adoc:311
#: upstream/_guides/hibernate-orm-panache.adoc:347
#: upstream/_guides/hibernate-orm-panache.adoc:397
#: upstream/_guides/hibernate-orm-panache.adoc:530
#: upstream/_guides/hibernate-orm-panache.adoc:781
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:28
#, no-wrap
msgid ""
"public enum Status {\n"
"    Alive,\n"
"    Deceased\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:38
#: upstream/_guides/hibernate-orm-panache.adoc:177
#: upstream/_guides/hibernate-orm-panache.adoc:197
#: upstream/_guides/hibernate-orm-panache.adoc:316
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.util.List;\n"
"import jakarta.persistence.Entity;\n"
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:44
#: upstream/_guides/hibernate-orm-panache.adoc:203
#: upstream/_guides/hibernate-orm-panache.adoc:322
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:48
#: upstream/_guides/hibernate-orm-panache.adoc:326
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:52
#: upstream/_guides/hibernate-orm-panache.adoc:330
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:57
#: upstream/_guides/hibernate-orm-panache.adoc:335
#, no-wrap
msgid ""
"    public static void deleteStefs(){\n"
"        delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:61
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr "你有注意到代码的紧凑性和可读性大大提高了吗？看起来很有趣吧？请继续阅读!"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:63
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` 方法一开始可能会让人吃惊。它只需要接收HQL（JP-QL）查询语句的片段，并对查询语句其余部分进行上下文推断处理。这使得代码非常简明，但也不失可读性。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:66
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上面所描述的编码模式本质上是 link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[Active Record模式] ，有时也称为实体模式。Panache也支持通过 `PanacheRepository` 使用更经典的 link:https://martinfowler.com/eaaCatalog/repository.html[Repository模式] 。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:67
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:71
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面几节的说明，一步一步地创建应用程序。当然，你也可以直接使用已完成的样例工程。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:73
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库可使用命令： `git clone {quickstarts-clone-url}` ，或者下载 {quickstarts-archive-url}[压缩包] 。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:75
#, fuzzy
#| msgid "The solution is located in the `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgid "The solution is located in the `hibernate-orm-panache-quickstart` link:{quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr "该解决方案位于 `hibernate-orm-panache-quickstart` {quickstarts-tree-url}/hibernate-orm-panache-quickstart[目录] 中。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:79
#, fuzzy
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr "如果你的项目已经被配置为使用其他注释处理器，你将需要额外添加Panache注释处理器："

#. type: Block title
#: upstream/_guides/hibernate-orm-panache.adoc:81
#: upstream/_guides/hibernate-orm-panache.adoc:123
#: upstream/_guides/hibernate-orm-panache.adoc:637
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:98
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/hibernate-orm-panache.adoc:101
#: upstream/_guides/hibernate-orm-panache.adoc:139
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:104
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:107
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr "在Hibernate ORM中配置Panache"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:110
msgid "To get started:"
msgstr "按以下步骤开始："

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:112
msgid "add your settings in `{config-file}`"
msgstr "在 `{config-file}` 中添加你的设置。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:113
msgid "annotate your entities with `@Entity`"
msgstr "给实体类增加 `@Entity` 注解"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:114
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "实体类改为继承 `PanacheEntity` 类（使用Repository模式时为可选操作）。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:116
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "按照 link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[Hibernate 设置指南] 进行其他配置。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:118
msgid "In your build file, add the following dependencies:"
msgstr "在你的项目构建文件中，添加以下依赖："

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:120
msgid "the Hibernate ORM with Panache extension"
msgstr "Hibernate ORM with Panache扩展"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:121
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "JDBC驱动扩展 (如 `quarkus-jdbc-postgresql` , `quarkus-jdbc-h2` , `quarkus-jdbc-mariadb` , ...)"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:130
#, no-wrap
msgid ""
"<!-- Hibernate ORM specific dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-orm-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:136
#, no-wrap
msgid ""
"<!-- JDBC driver dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:143
#, no-wrap
msgid ""
"// Hibernate ORM specific dependencies\n"
"implementation(\"io.quarkus:quarkus-hibernate-orm-panache\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:146
#, no-wrap
msgid ""
"// JDBC driver dependencies\n"
"implementation(\"io.quarkus:quarkus-jdbc-postgresql\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:149
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "然后在 `{config-file}` 添加相关配置。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:157
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:160
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:162
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解决方案1：使用Active Record模式"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:164
#: upstream/_guides/hibernate-orm-panache.adoc:340
#, no-wrap
msgid "Defining your entity"
msgstr "定义实体类"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:168
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr "要定义一个Panache实体类，只需继承 `PanacheEntity` ，增加 `@Entity` 注解，并将数据库列作为公共字段添加到实体类："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:184
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:188
#, fuzzy
msgid "You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "这些公共字段可以添加任何JPA列注解。如果你不想持久化某个字段，给它增加 `@Transient` 注解即可。如果你需要编写访问器，可以："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:208
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:214
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:219
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "由于重写了字段访问器，当用户读取 `person.name` 时，他们实际上会调用你的 `getName()` 访问器方法；类似的还有字段写入时调用设置器方法。这样的机制允许在运行时进行适当的封装，因为所有的字段调用都会替代为相应的 getter/setter 方法调用。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:220
#: upstream/_guides/hibernate-orm-panache.adoc:438
#, no-wrap
msgid "Most useful operations"
msgstr "常用操作"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:223
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "写好了实体类之后，你可以执行以下一些最常见的操作："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:230
#: upstream/_guides/hibernate-orm-panache.adoc:448
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.time.Month;\n"
"import java.util.List;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:236
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:239
#, no-wrap
msgid ""
"// persist it\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:242
#: upstream/_guides/hibernate-orm-panache.adoc:460
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:248
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:251
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:254
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:258
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:261
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:264
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:267
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:270
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:273
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:276
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:279
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:283
#: upstream/_guides/hibernate-orm-panache.adoc:501
msgid "All `list` methods have equivalent `stream` versions."
msgstr "上述所有 `list` 方法都有等效的的 `stream` 版本。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:289
#: upstream/_guides/hibernate-orm-panache.adoc:507
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
"import java.util.stream.Stream;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:296
#, no-wrap
msgid ""
"try (Stream<Person> persons = Person.streamAll()) {\n"
"    List<String> namesButEmmanuels = persons\n"
"        .map(p -> p.name.toLowerCase() )\n"
"        .filter( n -> ! \"emmanuel\".equals(n) )\n"
"        .collect(Collectors.toList());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:301
msgid "The `stream` methods require a transaction to work. + As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.  If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr "`stream` 方法的运行需要事务。+ 由于这些stream开头的方法会执行I/O操作，所以应该通过 `close()` 方法或try-with-resource来关闭底层的 `ResultSet` 。否则你会看到来自Agroal的警告，它会为你关闭底层的 `ResultSet` 。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:302
#, no-wrap
msgid "Adding entity methods"
msgstr "添加实体方法"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:307
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "你可以在实体类中添加对应实体的自定义查询。这样，查询与查询所操作的实体对象同在一处，你和你的同事可以很容易地找到它们。Panache的Active Record模式推荐将这些方法以静态方法的形式加入实体类。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:337
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解决方案2：使用Repository模式"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:343
#, fuzzy
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr "使用Repository模式时，可以将实体类定义为普通的JPA实体。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:351
#, no-wrap
msgid ""
"import jakarta.persistence.GeneratedValue;\n"
"import jakarta.persistence.Id;\n"
"import java.time.LocalDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:358
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:384
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:388
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "如果你不想自己定义实体的getter和setter方法，可以让实体类继承 `PanacheEntityBase` ，Quarkus将自动生成getter和setter方法。你也可以继承 `PanacheEntity` ，相比 `PanacheEntityBase` ，其优势是它还提供默认的ID字段。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:389
#, no-wrap
msgid "Defining your repository"
msgstr "定义Repository"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:393
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr "使用 Repository 模式时，通过实现 `PanacheRepository` 接口，你可以使用与Active Record模式下完全相同的便捷方法："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:399
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.PanacheRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:402
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:405
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:407
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:411
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:415
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:420
#, no-wrap
msgid ""
"   public void deleteStefs(){\n"
"       delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:424
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` 中定义的所有方法都可以在你的Repository类上使用，所以它使用起来与Active Record模式完全一样，只是你需要注入Repository类的实例："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:428
#, no-wrap
msgid "import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:431
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:436
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:441
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "写好了Repository类之后，你可以执行以下一些最常见的操作："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:454
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:457
#, no-wrap
msgid ""
"// persist it\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:466
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:469
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:472
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:476
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:479
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:482
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:485
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:488
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:491
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:494
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:497
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:513
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:516
msgid "The `stream` methods require a transaction to work."
msgstr "`stream` 方法的运行需要事务。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:520
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "后续的文档只展示了基于Active Record模式的用法，但请记住，这些用法也可以用于Repository模式。为了简洁起见，省略了Repository模式的例子。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:521
#, fuzzy, no-wrap
msgid "Writing a Jakarta REST resource"
msgstr "编写一个JAX-RS资源"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:524
#, fuzzy
msgid "First, include one of the RESTEasy Reactive extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for Jakarta REST and JSON support."
msgstr "首先，请添加任意一个RESTEasy Reactive扩展的依赖，以启用JAX-RS端点，例如，添加支持JAX-RS和JSON的 `io.quarkus:quarkus-resteasy-reactive-jackson` 依赖。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:526
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "然后，创建以下资源类，用于创建、读取、更新、删除Person实体。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:544
#, no-wrap
msgid ""
"import java.net.URI;\n"
"import java.util.List;\n"
"import jakarta.transaction.Transactional;\n"
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.DELETE;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.NotFoundException;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.PUT;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:549
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:554
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:560
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(Long id) {\n"
"        return Person.findById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:567
#, no-wrap
msgid ""
"    @POST\n"
"    @Transactional\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:576
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public Person update(Long id, Person person) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:579
#, no-wrap
msgid ""
"        // map all fields from the person parameter to the existing entity\n"
"        entity.name = person.name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:582
#, no-wrap
msgid ""
"        return entity;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:593
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public void delete(Long id) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        entity.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:599
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:606
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:610
msgid "Be careful to use the `@Transactional` annotation on the operations that modify the database, you can add the annotation at the class level for simplicity purpose."
msgstr "请注意，在修改数据库的操作上需要使用 `@Transactional` 注解，为了简单起见，你可以给类添加这个注解。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:612
#, fuzzy
msgid "To make it easier to showcase some capabilities of Hibernate ORM with Panache on Quarkus with Dev mode, some test data should be inserted into the database by adding the following content to a new file named src/main/resources/import.sql:"
msgstr "为了更方便地在Quarkus上展示Hibernate ORM与Panache的一些功能，应该在一个名为src/main/resources/import.sql的新文件中加入以下内容，将一些测试数据插入数据库："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:617
#, no-wrap
msgid ""
"INSERT INTO person (id, birth, name, status) VALUES (1, '1995-09-12', 'Emily Brown', 0);\n"
"ALTER SEQUENCE person_seq RESTART WITH 2;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:620
#, fuzzy
msgid "If you would like to initialize the DB when you start the Quarkus app in your production environment, add `quarkus.hibernate-orm.database.generation=drop-and-create` to the Quarkus startup options in addition to `import.sql`."
msgstr "如果你想在生产环境中启动Quarkus应用程序时初始化数据库，除了 `import.sql` ，还可以在Quarkus启动选项中添加 `quarkus.hibernate-orm.database.generation=drop-and-create` 。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:622
#, fuzzy
msgid "After that, you can see the people list and add new person as followings:"
msgstr "之后，你可以看到人们的名单，并添加新的人作为追随者："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:627
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/persons\n"
"[{\"id\":1,\"name\":\"Emily Brown\",\"birth\":\"1995-09-12\",\"status\":\"Alive\"}]\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:629
#, no-wrap
msgid "$ curl -X POST -H \"Content-Type: application/json\" -d '{\"name\" : \"William Davis\" , \"birth\" : \"1988-07-04\", \"status\" : \"Alive\"}' http://localhost:8080/persons\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:632
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/persons\n"
"[{\"id\":1,\"name\":\"Emily Brown\",\"birth\":\"1995-09-12\",\"status\":\"Alive\"}, {\"id\":2,\"name\":\"William Davis\",\"birth\":\"1988-07-04\",\"status\":\"Alive\"}]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:635
#, fuzzy
msgid "If you see the Person object as Person<1>, then the object has not been converted. In this case, add the dependency `quarkus-resteasy-reactive-jackson` in `pom.xml`."
msgstr "如果你看到Person对象是Person<1>，那么这个对象还没有被转换。在这种情况下，在 `pom.xml` ，添加依赖性 `quarkus-resteasy-reactive-jackson` 。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:643
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:645
#, no-wrap
msgid "Advanced Query"
msgstr "高级查询"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:647
#, no-wrap
msgid "Paging"
msgstr "分页"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:651
msgid "You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "如果你的表数据量很小，你应该只用到 `list` 和 `stream` 方法。对于较大的数据集，你可以使用对应的 `find` 方法，它返回一个 `PanacheQuery` ，可以对其进行分页查询操作："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:657
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
"import io.quarkus.panache.common.Page;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:660
#: upstream/_guides/hibernate-orm-panache.adoc:699
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:663
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:666
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:669
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:672
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:675
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:678
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"long count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:684
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:687
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 类还有很多其他方法来做分页查询、返回流。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:688
#, no-wrap
msgid "Using a range instead of pages"
msgstr "使用范围查询而替代分页查询"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:691
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` 也支持基于范围的查询。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:696
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:702
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:705
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:708
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:714
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "但不能混用范围查询和分页查询。当你使用范围查询时，调用任意依赖于分页查询的方法都会抛出一个 `UnsupportedOperationException` 异常；你可以使用 `page(Page)` 或 `page(int, int)` 方法切换回分页查询模式。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:716
#, no-wrap
msgid "Sorting"
msgstr "排序"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:719
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "所有接收查询字符串的方法也能接收以下简化形式的查询："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:723
#, no-wrap
msgid "List<Person> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:726
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "这些方法也可以接收一个 `Sort` 参数，它是对排序的抽象封装："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:730
#, no-wrap
msgid "import io.quarkus.panache.common.Sort;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:732
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:735
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:738
#, no-wrap
msgid ""
"// and list first the entries with null values in the field \"birth\"\n"
"List<Person> persons = Person.list(Sort.by(\"birth\", Sort.NullPrecedence.NULLS_FIRST));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:741
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr "`Sort` 类有很多用于添加列和指定排序方向的方法。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:742
#, no-wrap
msgid "Simplified queries"
msgstr "简化查询"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:746
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr "通常情况下，HQL查询语句是这种形式： `from EntityName [where ...​] [order by ...​]` ，结尾处有可选元素。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:748
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "如果你的查询语句不是以 `from` 开始，我们还支持以下的形式："

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:750
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` 语句会被扩展为： `from EntityName order by ...` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:751
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` (带单个参数）语句会被扩展为： `from EntityName where <singleColumnName> = ?` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:752
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `from EntityName where <query>` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:754
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "如果你的更新语句不是以 `update` 开始，我们还支持以下的形式："

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:756
#, fuzzy
msgid "`from EntityName ...` which will expand to `update EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `update from EntityName ...​` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:757
#, fuzzy
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update EntityName set <singleColumnName> = ?`"
msgstr "`set? <singleColumnName>` (带单个参数）语句会被扩展为： `update from EntityName set <singleColumnName> = ?` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:758
#, fuzzy
msgid "`set? <update-query>` will expand to `update EntityName set <update-query>`"
msgstr "`set? <update-query>` 语句会被扩展为： `update from EntityName set <update-query>` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:760
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "如果你的删除语句不是以 `delete` 开始，我们还支持以下的形式："

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:762
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName ...​` 语句会被扩展为： `delete from EntityName ...​` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:763
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr "`<singleColumnName>` (带单个参数）语句会被扩展为： `delete from EntityName where <singleColumnName> = ?` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:764
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` 语句会被扩展为： `delete from EntityName where <query>` "

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:767
#, fuzzy
#| msgid "You can also write your queries in plain link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL]:"
msgid "You can also write your queries in plain link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr "你也可以用普通的 link:https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#hql[HQL] 编写查询语句："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:772
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:774
#, no-wrap
msgid "Named queries"
msgstr "命名查询"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:777
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "除了上述的简化HQL查询以外，你还可以定义一个命名查询，然后通过'#'字符加命名来（在HQL中）引用它。在计数、更新和删除查询中也可以使用命名查询。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:786
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.NamedQueries;\n"
"import jakarta.persistence.NamedQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:789
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.panache.common.Parameters;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:797
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:802
#, no-wrap
msgid ""
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:806
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:810
#, no-wrap
msgid ""
"    public static long countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:814
#, no-wrap
msgid ""
"    public static long updateStatusById(Status status, long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:819
#, no-wrap
msgid ""
"    public static long deleteById(long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:825
#, fuzzy
msgid "Named queries can only be defined inside your Jakarta Persistence entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr "命名查询只能在JPA实体类（必须是Panache实体类，或Repository类的参数化类型）内定义，或在它的父类中定义。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:827
#, no-wrap
msgid "Query parameters"
msgstr "查询参数"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:830
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "你可以通过索引（从1开始）传递查询参数，如下所示："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:834
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:837
msgid "Or by name using a `Map`:"
msgstr "或者使用 `Map` ，用key做参数名："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:842
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:847
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:850
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "或者使用 `Parameters` 类，也可以方便地构造一个 `Map` ："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:856
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:860
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:863
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "所有查询操作都可以接收按索引（ `Object...​` ）或按名称（ `Map<String,Object>` 或 `Parameters` ）传递的参数。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:864
#, no-wrap
msgid "Query projection"
msgstr "查询结果投影"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:867
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "对 `find()` 方法返回的 `PanacheQuery` 对象，可以使用 `project(Class)` 方法投影到指定的实体类。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:869
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "你可以用投影限制数据库返回哪些字段。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:873
#, fuzzy
#| msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[hql select clause]"
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr "Hibernate会使用 *DTO投影* ，并根据投影的类的属性生成SELECT子句。这也被称为 *动态实例化* 或 *构造器表达* ，更多信息可以在Hibernate指南中找到： link:https://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html#hql-select-clause[HQL select子句]"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:876
#, fuzzy
msgid "The projection class needs to have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr "投影类必须是有效的Java Bean，并且拥有一个包含所有属性的构造方法，这个构造方法用于实例化投影DTO，而不是使用实体类。投影类必须有一个包含所有的类属性作为参数的构造方法。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:882
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.RegisterForReflection;\n"
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:886
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:891
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:894
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:896
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` 注解用于指导Quarkus在native编译过程中保留该类和其成员。关于 `@RegisterForReflection` 注解的更多细节可以在 link:writing-native-applications-tips.html#registerForReflection[native应用程序提示] 页面找到。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:897
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "在这里我们使用public的字段，你也可以使用private字段和对应的getter/setter方法。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:898
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr "Hibernate会用到这个构造方法，它必须是类中唯一的构造函数，并且包含所有类属性作为参数。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:905
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr "在 `project(Class)` 方法的实现中，使用构造函数的参数名来构建查询的select子句，所以编译器必须配置为在编译的类中保留参数名。如果是使用Quarkus Maven archetype创建的项目，该功能默认是启用的。如果你没有使用，请在你的 `pom.xml` 中添加该属性 `<maven.compiler.parameters>true</maven.compiler.parameters>` 。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:908
#, fuzzy
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr "如果你运行的是Java 17+，记录是很适合投影类的。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:910
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "如果DTO投影对象中有来自引用的实体字段，可以使用 `@ProjectedFieldName` 注解指定SELECT语句使用的查询路径。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:915
#, no-wrap
msgid ""
"import jakarta.persistence.ManyToOne;\n"
"import io.quarkus.hibernate.orm.panache.common.ProjectedFieldName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:924
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    public Double weight;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:929
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:935
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:937
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:939
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "DTO构造器的 `ownerName` 参数将从 `owner.name` HQL属性加载。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:942
msgid "It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor matching the values returned by the select clause:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:946
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:951
#, no-wrap
msgid ""
"@RegisterForReflection \n"
"public class RaceWeight {\n"
"    public final String race;\n"
"    public final Double weight;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:955
#, no-wrap
msgid ""
"    public RaceWeight(String race) {\n"
"        this(race, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:961
#, no-wrap
msgid ""
"    public RaceWeight(String race, Double weight) { // <1>\n"
"        this.race = race;\n"
"        this.weight = weight;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:964
#, no-wrap
msgid ""
"// Only the race and the average weight will be loaded\n"
"PanacheQuery<RaceWeight> query = Person.find(\"select d.race, AVG(d.weight) from Dog d group by d.race\").project(RaceWeight.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:966
msgid "Hibernate ORM will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:970
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:972
msgid "For example, this will fail:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:976
#, no-wrap
msgid "PanacheQuery<RaceWeight> query = Person.find(\"select new MyView(d.race, AVG(d.weight)) from Dog d group by d.race\").project(AnotherView.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:979
#, no-wrap
msgid "Multiple Persistence Units"
msgstr "多个持久化单元"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:982
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr "在 link:hibernate-orm.html#multiple-persistence-units[Hibernate ORM指南] 中对多个持久化单元的支持有详细描述。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:984
msgid "When using Panache, things are simple:"
msgstr "使用Panache时，事情很简单："

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:986
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr "一个Panache实体类只能配置到一个持久化单元。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:987
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr "鉴于此，Panache已经提供了必要的管道， 可以透明地找到Panache实体类对应的 `EntityManager` 。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:988
#, no-wrap
msgid "Transactions"
msgstr "事务"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:993
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "请确保修改数据库的方法（例如： `entity.persist()` ）处于同一个事务中。给一个CDI bean方法增加 `@Transactional` 注解，可以确保该方法即事务边界。我们建议在应用端点的边界这样做，比如REST端点的Controller。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:999
#, fuzzy
msgid "Hibernate ORM batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.  This is usually a good thing as it is more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate ORM sends those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr "JPA将实体的变更进行批量处理，并在事务结束时或查询前发送批量变更（这被称为flush）。这通常更有效率。但是当你想检查乐观锁的失败，即时进行对象验证，或者想得到即时的反馈，你可以通过调用 `entity.flush()` 或 `entity.persistAndFlush()` 强制执行flush。JPA向数据库发送这些变更时可能会抛出 `PersistenceException` ，你可以捕捉这些异常。记住，这样做的效率较低，所以不要滥用它。而且你的事务仍然需要提交。"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:1001
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "下面是一个使用 flush 方法的例子，它在捕获到 `PersistenceException` 异常时执行指定操作："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1004
#, no-wrap
msgid "import jakarta.persistence.PersistenceException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1017
#, no-wrap
msgid ""
"@Transactional\n"
"public void create(Parameter parameter){\n"
"    try {\n"
"        //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"        return parameterRepository.persistAndFlush(parameter);\n"
"    }\n"
"    catch(PersistenceException pe){\n"
"        LOG.error(\"Unable to create the parameter\", pe);\n"
"        //in case of error, I save it to disk\n"
"        diskPersister.save(parameter);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1019
#, no-wrap
msgid "Lock management"
msgstr "锁管理"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1022
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panache支持在实体类/Repository类中直接使用数据库的锁，可使用 `findById(Object, LockModeType)` 或 `find().withLock(LockModeType)` 方法。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1024
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "下面的例子是针对Active Record模式的，但同样可以应用于Repository模式。"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1025
#, no-wrap
msgid "First: Locking using findById()."
msgstr "第一：通过findById()方法使用数据库锁。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1032
#: upstream/_guides/hibernate-orm-panache.adoc:1053
#, no-wrap
msgid ""
"import jakarta.persistence.LockModeType;\n"
"import jakarta.transaction.Transactional;\n"
"import jakarta.ws.rs.GET;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1034
#: upstream/_guides/hibernate-orm-panache.adoc:1055
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1042
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByIdForUpdate(Long id){\n"
"        Person p = Person.findById(id, LockModeType.PESSIMISTIC_WRITE);\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1044
#: upstream/_guides/hibernate-orm-panache.adoc:1065
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1046
#, no-wrap
msgid "Second: Locking in a find()."
msgstr "第二：通过find()方法使用数据库锁。"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1063
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByNameForUpdate(String name){\n"
"        Person p = Person.find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).findOne();\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1068
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr "请注意，事务结束时锁会被释放，所以调用了带锁查询的方法必须加上 `@Transactional` 注解。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1069
#, no-wrap
msgid "Custom IDs"
msgstr "自定义ID"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1073
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr "ID往往是一个敏感的话题，并不是所有人都愿意让框架来处理，因此我们提供了相应的配置。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1076
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr "你可以通过继承 `PanacheEntityBase` ，而非 `PanacheEntity` ，来指定你自己的ID策略。然后只要把你想要的ID字段声明为public字段："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1085
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.GeneratedValue;\n"
"import jakarta.persistence.GenerationType;\n"
"import jakarta.persistence.Id;\n"
"import jakarta.persistence.SequenceGenerator;\n"
"import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1088
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1097
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1100
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1104
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr "如果你使用Repository模式，那么要继承 `PanacheRepositoryBase` ，而非 `PanacheRepository` ，并将ID字段类型作为额外的类型参数："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1109
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1114
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1116
#, no-wrap
msgid "Mocking"
msgstr "Mock模拟测试"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1118
#, no-wrap
msgid "Using the active record pattern"
msgstr "使用Active Record模式"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1123
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "如果你使用了Active Record模式，那么不能直接使用Mockito，因为它不支持Mock静态方法。你可以使用 `quarkus-panache-mock` 模块，它允许你使用Mockito来模拟所有静态方法，包括你自己编写的。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1125
msgid "Add this dependency to your `pom.xml`:"
msgstr "将以下依赖性添加到你的 `pom.xml` ："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1133
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1137
#: upstream/_guides/hibernate-orm-panache.adoc:1293
msgid "Given this simple entity:"
msgstr "编写一个简单的实体类："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1142
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1144
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1149
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1152
#: upstream/_guides/hibernate-orm-panache.adoc:1320
msgid "You can write your mocking test like this:"
msgstr "你可以这样编写模拟测试："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1162
#, no-wrap
msgid ""
"import io.quarkus.panache.mock.PanacheMock;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
"import jakarta.ws.rs.WebApplicationException;\n"
"import java.util.Collections;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1165
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1169
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1172
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1176
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1180
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1184
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1187
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1193
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1197
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1201
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1204
#, no-wrap
msgid ""
"        // Mocking a void method\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1213
#, no-wrap
msgid ""
"        // Make it throw\n"
"        PanacheMock.doThrow(new RuntimeException(\"Stef2\")).when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"Stef2\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1217
#, no-wrap
msgid ""
"        // Back to doNothing\n"
"        PanacheMock.doNothing().when(Person.class).voidMethod();\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1226
#, no-wrap
msgid ""
"        // Make it call the real method\n"
"        PanacheMock.doCallRealMethod().when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"void\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1233
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeast(4)).voidMethod();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1236
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "请确保是在 `PanacheMock` 上调用 `verify` 和 `do*` 方法，而不是在 `Mockito` 上调用，否则无法传递mock对象。"

#. type: Title ====
#: upstream/_guides/hibernate-orm-panache.adoc:1237
#, no-wrap
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr "模拟 `EntityManager` , `Session` 及实体类的实例方法"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1240
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr "如果你需要模拟实体类的实例方法，比如 `persist()` ，可以通过模拟Hibernate ORM的 `Session` 对象来实现："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1251
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
"import org.hibernate.Session;\n"
"import org.hibernate.query.Query;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.BeforeEach;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1254
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMockingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1257
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Session session;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1265
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Query mockQuery = Mockito.mock(Query.class);\n"
"        Mockito.doNothing().when(session).persist(Mockito.any());\n"
"        Mockito.when(session.createQuery(Mockito.anyString())).thenReturn(mockQuery);\n"
"        Mockito.when(mockQuery.getSingleResult()).thenReturn(0l);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1272
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        Person p = new Person();\n"
"        // mocked via EntityManager mocking\n"
"        p.persist();\n"
"        Assertions.assertNull(p.id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1276
#, no-wrap
msgid ""
"        Mockito.verify(session, Mockito.times(1)).persist(Mockito.any());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1278
#, no-wrap
msgid "Using the repository pattern"
msgstr "使用Repository模式"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1282
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "如果你使用Repository模式，你可以直接使用Mockito。使用 `quarkus-junit5-mockito` 模块可以更简单地模拟Bean："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1290
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1298
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1302
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1305
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1308
msgid "And this repository:"
msgstr "以及这个Repository类："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1317
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1330
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
"import jakarta.ws.rs.WebApplicationException;\n"
"import java.util.Collections;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1335
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1340
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1344
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1348
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1352
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1355
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1361
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1365
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1368
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1375
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1377
#, no-wrap
msgid "How and why we simplify Hibernate ORM mappings"
msgstr "我们为什么简化Hibernate ORM映射？怎么做到的？"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1381
msgid "When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "在编写Hibernate ORM实体类时，用户已经习惯了被迫处理许多烦人的事情，例如："

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1384
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really relevant to your model."
msgstr "重复的ID逻辑：大多数实体需要一个ID，大多数人并不关心它是如何设置的，因为它并不真的与模型相关。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1390
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires a split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "传统的EE模式建议将实体定义（模型）与它可以进行的操作（DAO、Repository）分开，但实际上这需要将实体状态及其操作分开；但在面向对象的架构里我们不会对普通对象这样做，因为普通对象的状态和方法在同一个类中。此外，这样需要每个实体对应两个类，并且要在需要进行实体操作的地方注入DAO或Repository，这就破坏了你的开发流程，需要你从正在编写的代码中跳出来，建立一个注入点，然后再回来使用它。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1392
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "Hibernate查询功能很强大，但对于普通操作来说过于冗长，即使是简单操作也要求写完整的HQL语句。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1394
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr "Hibernate很通用，但对于模型里90%的琐碎操作，编写起来并不简单。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1396
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "我们通过Panache采取了一种有主见的方案来解决以上这些问题："

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1399
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "让你的实体类继承 `PanacheEntity` ：它有一个自动生成的ID字段。如果你需要自定义ID策略，可以继承 `PanacheEntityBase` ，而不用自己处理ID。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1402
msgid "Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters, but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr "使用public字段，抛开愚蠢的getter和setter方法。Hibernate ORM Panache不要求你使用getter和setter方法，但Panache会额外生成所有缺失的getter和setter方法，并将所有对这些字段的访问重写为getter/setter方法的调用。这样，当你需要的时候，仍可以编写 _有用的_ 访问器，即使实体类的调用者仍然使用字段访问，实际也会使用这些访问器。这意味着从Hibernate的角度来看，你正在通过getter和setter方法使用访问器，即使代码看起来像字段访问器。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1405
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "使用Active Record模式：把你所有的实体逻辑放在实体类的静态方法中，不要创建DAO。实体类的父类带有很多很有用的静态方法，你也可以在实体类中添加自己的静态方法。用户可以通过输入 `Person.` 开始使用实体 `Person` ，并可以在同一个地方完成所有操作。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1408
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr "不要写多余的查询语句：可以写 `Person.find(\"order by name\")` 或 `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` ，甚至更好的 `Person.find(\"name\", \"stef\")` 。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1410
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr "以上就是它的全部内容：有了Panache，Hibernate ORM看起来变得如此轻量和整洁。"

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1411
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "在外部项目或jar包中定义实体"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1414
msgid "Hibernate ORM with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "Hibernate ORM Panache依赖于编译时对实体类的字节码增强。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1420
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "Panache通过判断是否存在标记文件 `META-INF/panache-archive.marker` 来识别jar包是否包含 Panache 实体类（及 Panache 实体类的调用方）。Panache 包含一个注解处理器，它会自动在依赖 Panache（包括间接依赖Panache）的jar包中创建此文件。如果在某些情况下你禁用了注解处理器，可能需要手动创建此文件。"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1424
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr "如果你的项目包含 jpa-modelgen 注解处理器，则默认情况下会排除 Panache 注解处理器。这种情况下，你应该自己创建标记文件，或者添加 `quarkus-panache-common` 插件，如下所示："

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1445
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

msgid ""
msgstr ""
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Using OpenID Connect (OIDC) multitenancy"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This guide demonstrates how your OpenID Connect (OIDC) application can support multitenancy to serve multiple tenants from a single application.\n"
"These tenants can be distinct realms or security domains within the same OIDC provider or even distinct OIDC providers."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Each customer functions as a distinct tenant when serving multiple customers from the same application, such as in a SaaS environment.\n"
"By enabling multitenancy support to your applications, you can support distinct authentication policies for each tenant, even authenticating against different OIDC providers, such as Keycloak and Google."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To authorize a tenant by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To authenticate and authorize a tenant by using the OIDC authorization code flow, read the xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow mechanism for protecting web applications] guide."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Also, see the xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) configuration properties] reference guide."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "In this example, we build a very simple application that supports two resource methods:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}`"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the ID token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}/bearer`"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the Access Token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Solution"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "For a thorough understanding, we recommend you build the application by following the upcoming step-by-step instructions."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Alternatively, if you prefer to start with the completed example, clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"First, we need a new project.\n"
"Create a new project with the following command:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "If you already have your Quarkus project configured, add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This adds the following to your build file:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Writing the application"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Start by implementing the `/{tenant}` endpoint.\n"
"As you can see from the source code below, it is just a regular Jakarta REST resource:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in `application.properties`, create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface, which can dynamically resolve tenant configurations:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In the preceding implementation, tenants are resolved from the request path.\n"
"If no tenant can be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `tenant-a` application type is `hybrid`; it can accept HTTP bearer tokens if provided.\n"
"Otherwise, it initiates an authorization code flow when authentication is required."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Configuring the application"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The first configuration is the default tenant configuration that should be used when the tenant cannot be inferred from the request.\n"
"Be aware that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` to support testing a multitenant application with Dev Services For Keycloak.\n"
"This configuration uses a Keycloak instance to authenticate users."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The second configuration, provided by `TenantConfigResolver`, is used when an incoming request is mapped to the `tenant-a` tenant."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Alternatively, you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "In that case, also use a custom `TenantConfigResolver` to resolve it:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"You can define multiple tenants in your configuration file.\n"
"To map them correctly when resolving a tenant from your `TenantResolver` implementation, ensure each has a unique alias."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "However, using a static tenant resolution, which involves configuring tenants in `application.properties` and resolving them with `TenantResolver`, does not work for testing endpoints with Dev Services for Keycloak because it does not know how the requests are be mapped to individual tenants, and cannot dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values. Therefore, using `%prod` prefixes with tenant-specific URLs within `application.properties` does not work in both test and development modes."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` contains a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant-specific state or session cookie already exists.\n"
"Therefore, when working with multiple OIDC providers, you only need a path-specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This is how Quarkus OIDC resolves static custom tenants if no custom `TenantResolver` is registered."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "A similar technique can be used with `TenantConfigResolver`, where a `tenant-id` provided in the context can return `OidcTenantConfig` already prepared with the previous request."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant ids are the same\n"
"and must be extracted from the Vert.x `RoutingContext`, you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver\n"
"as a `RoutingContext` attribute, for example:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Starting and configuring the Keycloak server"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To start a Keycloak server, you can use Docker and run the following command:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "where `keycloak.version` is set to `23.0.0` or higher."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Access your Keycloak server at http://localhost:8180[localhost:8180]."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Log in as the `admin` user to access the Keycloak administration console.\n"
"The username and password are both `admin`."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Now, import the realms for the two tenants:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "For more information, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Running and using the application"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Running in developer mode"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To run the microservice in dev mode, use:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Running in JVM mode"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "First, compile it:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Then run it:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Running in native mode"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This same demo can be compiled into native code; no modifications are required."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resources."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Compilation takes a bit longer, so this step is turned off by default;\n"
"let's build again by enabling the native build:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "After a little while, you can run this binary directly:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Test the application"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Use Dev Services for Keycloak"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"Dev Services for Keycloak launches and initializes a test container: it imports configured realms and sets a base Keycloak URL for the `CustomTenantResolver` to calculate a realm-specific URL."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "First, add the following dependencies:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.\n"
"`HtmlUnit` tests the `/{tenant}` endpoint and the authorization code flow."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Next, configure the required realms:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, write your test, which runs in JVM mode:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "In native mode:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "For more information about how it is initialized and configured, see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Use the browser"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To test the application, open your browser and access the following URL:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If everything works as expected, you are redirected to the Keycloak server to authenticate.\n"
"Be aware that the requested path defines a `default` tenant, which we don't have mapped in the configuration file.\n"
"In this case, the default configuration is used."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To authenticate to the application, enter the following credentials in the Keycloak login page:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Username: `alice`"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Password: `alice`"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "After clicking the *Login* button, you are redirected back to the application."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "If you try now to access the application at the following URL:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"You are redirected again to the Keycloak login page.\n"
"However, this time, you are going to authenticate by using a different realm."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In both cases, the landing page shows the user's name and email if the user is successfully authenticated.\n"
"Although `alice` exists in both tenants, the application treats them as distinct users in separate realms."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Static tenant configuration resolution"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.\n"
"To configure the resolution of the tenant identifier, use one of the following options:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "<<tenant-resolver>>"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "<<default-tenant-resolver>>"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "<<annotations-tenant-resolver>>"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"These tenant resolution options are tried in the order they are listed until the tenant id gets resolved.\n"
"If the tenant id remains unresolved (`null`), the default (unnamed) tenant configuration is selected."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Resolve with `TenantResolver`"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "You can return the tenant id of either `a` or `b` from `quarkus.oidc.TenantResolver`:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "In this example, the value of the last request path segment is a tenant id, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Default resolution"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In the provided example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and require session cookies to be generated after authentication.\n"
"After Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, such as a secured resource path on the JAX-RS endpoint."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific `/google` or `/github` JAX-RS resource paths.\n"
"Tenant identifiers are also recorded in the session cookie names after the authentication is completed.\n"
"Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Default resolution can also work for Bearer token authentication.\n"
"Still, it might be less practical because a tenant identifier must always be set as the last path segment value."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Resolve with annotations"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work.\n"
"For more information, see the xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Assuming your application supports two OIDC tenants, the `hr` and default tenants, all resource methods and classes carrying `@Tenant(\"hr\")` are authenticated by using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`.\n"
"In contrast, all other classes and methods are still authenticated by using the default OIDC provider."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed on either the resource class or resource method."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Dynamic tenant configuration resolution"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `OidcTenantConfig` returned by this method is the same one used to parse the `oidc` namespace configuration from the `application.properties`.\n"
"You can populate it by using any settings supported by the `quarkus-oidc` extension."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "If the dynamic tenant resolver returns `null`, a <<static-tenant-resolution>> is attempted next."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution for OIDC web-app applications"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The simplest option for resolving the OIDC `web-app` application configuration is to follow the steps described in the <<default-tenant-resolver>> section."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Try one of the options below if the default resolution strategy does not work for your application setup."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Several options are available for selecting the tenant configuration that should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Check the URL paths.\n"
"For example, a `tenant-service` configuration must be used for the `/service` paths, while a `tenant-manage` configuration must be used for the `/management` paths."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Check the HTTP headers.\n"
"For example, with a URL path always being `/service`, a header such as `Realm: service` or `Realm: management` can help to select between the `tenant-service` and `tenant-manage` configurations."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Check the URL query parameters.\n"
"It can work similarly to the way the headers are used to select the tenant configuration."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie might be needed to select the same tenant configuration before and after this redirect request because:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The URL path might not be the same after the redirect request if a single redirect URL has been registered in the OIDC provider.\n"
"The original request path can be restored after the tenant configuration has been resolved."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The HTTP headers used during the original request are unavailable after the redirect."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The custom URL query parameters are restored after the redirect but only after the tenant configuration is resolved."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Disabling tenant configurations"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations might return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "If you expect the custom resolvers always to resolve a tenant, you do not need to configure the default tenant resolution."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To turn off the default tenant configuration, set  `quarkus.oidc.tenant-enabled=false`."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured, but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Be aware that tenant-specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "References"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr ""

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

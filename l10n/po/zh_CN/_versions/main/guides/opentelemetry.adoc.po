# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-10 02:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/opentelemetry.adoc:6
#, no-wrap
msgid "Using OpenTelemetry"
msgstr "使用OpenTelemetry"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:15
#, fuzzy
msgid "This guide explains how your Quarkus application can utilize https://opentelemetry.io/[OpenTelemetry] (OTel) to provide distributed tracing for interactive web applications."
msgstr "本指南解释了您的Quarkus应用程序如何利用 link:https://opentelemetry.io/[OpenTelemetry] 来为交互式Web应用提供分布式跟踪服务。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:19
msgid "OpenTelemetry Metrics and Logging are not yet supported."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:22
msgid "Quarkus now supports the OpenTelemetry Autoconfiguration for Traces. The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] with the `quarkus.*` prefix."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:23
msgid "Extensions and the libraries they provide, are directly instrumented in Quarkus. The *use of the https://opentelemetry.io/docs/instrumentation/java/automatic/[OpenTelemetry Agent] is not needed nor recommended* due to context propagation issues between imperative and reactive libraries."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:24
msgid "If you come from the legacy OpenTracing extension, there is a xref:telemetry-opentracing-to-otel-tutorial.adoc[guide to help with the migration]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:26
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:31
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:34
msgid "In this guide, we create a straightforward REST application to demonstrate distributed tracing."
msgstr "在本指南中，我们创建了一个简单的REST应用程序来演示分布式跟踪服务。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:35
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:39
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr "我们建议您按照下面几节的说明，一步一步地创建应用程序。不过，您可以直接跳到已完成的例子。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:41
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:43
#, fuzzy
#| msgid "The solution is located in the `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgid "The solution is located in the `opentelemetry-quickstart` link:{quickstarts-tree-url}/opentelemetry-quickstart[directory]."
msgstr "该解决方案位于 `opentelemetry-quickstart` {quickstarts-tree-url}/opentelemetry-quickstart[目录]中。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:44
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:47
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:55
#, fuzzy
msgid "This command generates the Maven project and imports the `quarkus-opentelemetry` extension, which includes the default OpenTelemetry support, and a gRPC span exporter for https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP]."
msgstr "该命令生成Maven项目并导入 `quarkus-opentelemetry-exporter-otlp` 扩展，其中包括OpenTelemetry支持，以及 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md[OTLP] 的gRPC span exporter。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:58
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `quarkus-opentelemetry` extension to your project by running the following command in your project base directory:"
msgstr "如果您已经配置了您的Quarkus项目，您可以通过在您的项目根目录下运行以下命令，将 `quarkus-opentelemetry-exporter-otlp` 扩展添加到您的项目中："

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:63
msgid "This will add the following to your build file:"
msgstr "这会将以下内容添加到你的构建文件中:"

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:65
#: upstream/_versions/main/guides/opentelemetry.adoc:236
#: upstream/_versions/main/guides/opentelemetry.adoc:300
#: upstream/_versions/main/guides/opentelemetry.adoc:318
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:71
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-opentelemetry</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/opentelemetry.adoc:74
#: upstream/_versions/main/guides/opentelemetry.adoc:245
#: upstream/_versions/main/guides/opentelemetry.adoc:309
#: upstream/_versions/main/guides/opentelemetry.adoc:327
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:77
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-opentelemetry\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:79
#, fuzzy, no-wrap
msgid "Examine the Jakarta REST resource"
msgstr "检查JAX-RS资源"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:82
msgid "Create a `src/main/java/org/acme/opentelemetry/TracedResource.java` file with the following content:"
msgstr "创建一个 `src/main/java/org/acme/opentelemetry/TracedResource.java` 文件，内容如下："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:86
#, no-wrap
msgid "package org.acme.opentelemetry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:92
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:95
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class TracedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:97
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(TracedResource.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:105
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        LOG.info(\"hello\");\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:109
msgid "Notice that there is no tracing specific code included in the application. By default, requests sent to this endpoint will be traced without any required code changes."
msgstr "请注意，应用程序中没有包含任何关于追踪的代码。默认情况下，不需要修改任何必要的代码就可以实现对发送到这个节点的请求进行追踪。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:110
#, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:113
msgid "There are no mandatory configurations for the extension to work."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:115
msgid "If you need to change any of the default property values, here is an example on how to configure the default OTLP gRPC Exporter within the application, using the `src/main/resources/application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:122
#, no-wrap
msgid ""
"quarkus.application.name=myservice // <1>\n"
"quarkus.otel.exporter.otlp.traces.endpoint=http://localhost:4317 // <2>\n"
"quarkus.otel.exporter.otlp.traces.headers=authorization=Bearer my_secret // <3>\n"
"quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n  // <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:125
#, no-wrap
msgid ""
"# Alternative to the console log\n"
"quarkus.http.access-log.pattern=\"...traceId=%{X,traceId} spanId=%{X,spanId}\" // <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:128
msgid "All spans created from the application will include an OpenTelemetry `Resource` indicating the span was created by the `myservice` application. If not set, it will default to the artifact id."
msgstr "所有从应用程序创建的spans将包含一个OpenTelemetry `Resource` ，表明该span是由 `myservice` 应用程序创建。如果没有设置，它将默认为artifact id。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:129
msgid "gRPC endpoint to send spans. If not set, it will default to `http://localhost:4317`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:130
msgid "Optional gRPC headers commonly used for authentication"
msgstr "可选的gRPC消息头，通常用于认证"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:131
msgid "Add tracing information into log messages."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:132
msgid "You can also only put the trace info into the access log. In this case you must omit the info in the console log format."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:136
msgid "All configurations have been updated from `quarkus.opentelemetry.\\*` -> `quarkus.otel.*`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:138
msgid "The legacy configurations are now deprecated but will still work during a transition period."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:140
#, no-wrap
msgid "Disable all or parts of the OpenTelemetry extension"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:143
msgid "Once you add the dependency, the extension will be enabled by default but there are a few ways to disable the OpenTelemetry extension globally or partially."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:145
#, no-wrap
msgid "Property name"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:145
#, fuzzy, no-wrap
#| msgid "Default"
msgid "Default value"
msgstr "默认值"

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:147
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:148
#, no-wrap
msgid "`quarkus.otel.enabled`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:149
#: upstream/_versions/main/guides/opentelemetry.adoc:157
#: upstream/_versions/main/guides/opentelemetry.adoc:161
#, no-wrap
msgid "true"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:151
#, no-wrap
msgid "If false, disable the OpenTelemetry usage at *build* time."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:152
#, no-wrap
msgid "`quarkus.otel.sdk.disabled`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:153
#, no-wrap
msgid "false"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:155
#, no-wrap
msgid "Comes from the OpenTelemetry autoconfiguration. If true, will disable the OpenTelemetry SDK usage at *runtime*."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:156
#, no-wrap
msgid "`quarkus.otel.traces.enabled`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:159
#, no-wrap
msgid "If false, disable the OpenTelemetry tracing usage at *build* time."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:160
#, no-wrap
msgid "`quarkus.otel.exporter.otlp.enabled`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:162
#, no-wrap
msgid "If false will disable the default OTLP exporter at *build* time."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:165
msgid "If you need to enable or disable the exporter at runtime, you can use the xref:sampler[Sampler] because it has the ability to filter out all the spans if needed."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:167
#, no-wrap
msgid "Run the application"
msgstr "运行应用程序"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:170
msgid "The first step is to configure and start the https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] to receive, process and export telemetry data to https://www.jaegertracing.io/[Jaeger] that will display the captured traces."
msgstr "第一步是配置和启动 link:https://opentelemetry.io/docs/collector/[OpenTelemetry Collector] ，以接收、处理和输出勘测数据到 link:https://www.jaegertracing.io/[Jaeger] 来显示捕获的traces。"

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:176
msgid "Jaeger-all-in-one includes the Jaeger agent, an OTel collector, and the query service/UI.  You do not need to install a separated collector. You can directly send the trace data to Jaeger (after enabling OTLP receivers there, see e.g. this https://medium.com/jaegertracing/introducing-native-support-for-opentelemetry-in-jaeger-eb661be8183c[blog entry] for details)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:179
msgid "Start the OpenTelemetry Collector and Jaeger system via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr "您可以通过 `docker-compose up -d` 命令和下面的 `docker-compose.yml` 文件来启动OpenTelemetry Collector和Jaeger系统："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:184
#, no-wrap
msgid ""
"version: \"2\"\n"
"services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:196
#, no-wrap
msgid ""
"  # Jaeger\n"
"  jaeger-all-in-one:\n"
"    image: jaegertracing/all-in-one:latest\n"
"    ports:\n"
"      - \"16686:16686\" # Jaeger UI\n"
"      - \"14268:14268\" # Receive legacy OpenTracing traces, optional\n"
"      - \"4317:4317\"   # OTLP gRPC receiver\n"
"      - \"4318:4318\"   # OTLP HTTP receiver, not yet used by Quarkus, optional\n"
"      - \"14250:14250\" # Receive from external otel-collector, optional\n"
"    environment:\n"
"      - COLLECTOR_OTLP_ENABLED=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:198
msgid "You should remove the optional ports you don't need them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:200
msgid "Now we are ready to run our application. If using `application.properties` to configure the tracer:"
msgstr "现在我们准备运行我们的应用程序。如果使用 `application.properties` 来配置tracer："

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:204
msgid "or if configuring the OTLP gRPC endpoint via JVM arguments:"
msgstr "或者如果通过JVM参数配置OTLP gRPC节点："

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:210
#, fuzzy
msgid "With the OpenTelemetry Collector, the Jaeger system and the application running, you can make a request to the provided endpoint:"
msgstr "在OpenTelemetry Collector、Jaeger系统和应用程序运行的情况下，您可以向指定的节点发出请求："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:215
#, no-wrap
msgid ""
"$ curl http://localhost:8080/hello\n"
"hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:218
msgid "When the first request has been submitted, you will be able to see the tracing information in the logs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:224
#, no-wrap
msgid ""
"10:49:02 INFO  traceId=, parentId=, spanId=, sampled= [io.quarkus] (main) Installed features: [cdi, opentelemetry, rest-client, resteasy, smallrye-context-propagation, vertx]\n"
"10:49:03 INFO  traceId=17ceb8429b9f25b0b879fa1503259456, parentId=3125c8bee75b7ad6, spanId=58ce77c86dd23457, sampled=true [or.ac.op.TracedResource] (executor-thread-1) hello\n"
"10:49:03 INFO  traceId=ad23acd6d9a4ed3d1de07866a52fa2df, parentId=, spanId=df13f5b45cf4d1e2, sampled=true [or.ac.op.TracedResource] (executor-thread-0) hello\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:228
msgid "Then visit the http://localhost:16686[Jaeger UI] to see the tracing information."
msgstr "然后访问 link:http://localhost:16686[Jaeger界面] 来查看追踪信息。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:230
#, fuzzy
msgid "Hit `CTRL+C` or type `q` to stop the application."
msgstr "使用 `CTRL+C` 来停止应用程序。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:231
#, no-wrap
msgid "JDBC"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:234
msgid "The https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] will add a span for each JDBC queries done by your application, to enable it, add the following dependency to your build file:"
msgstr "通过link:https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/jdbc/library[JDBC instrumentation] 可以为您的应用程序的每个JDBC查询添加一个span。要启用它，请在您的构建文件中添加以下依赖："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:242
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.instrumentation</groupId>\n"
"    <artifactId>opentelemetry-jdbc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:248
#, no-wrap
msgid "implementation(\"io.opentelemetry.instrumentation:opentelemetry-jdbc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:251
#, fuzzy
msgid "As it uses a dedicated JDBC datasource wrapper, you must enable telemetry for your datasource:"
msgstr "由于它使用专用的JDBC驱动，您必须配置您的数据源和Hibernate ORM来使用它。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:256
#, no-wrap
msgid ""
"# enable tracing\n"
"quarkus.datasource.jdbc.telemetry=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:260
#, no-wrap
msgid ""
"# configure datasource\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:262
#, no-wrap
msgid "Additional configuration"
msgstr "其他配置"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:265
msgid "Some use cases will require custom configuration of OpenTelemetry.  These sections will outline what is necessary to properly configure it."
msgstr "有些情况下需要对OpenTelemetry进行自定义配置。以下章节将展示如何对一些必要的属性进行正确配置。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:266
#, no-wrap
msgid "ID Generator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:269
msgid "The OpenTelemetry extension will use by default a random https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID Generator] when creating the trace and span identifier."
msgstr "OpenTelemetry扩展将默认使用一个随机的 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#id-generators[ID发生器] 来创建trace和span标识符。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:272
msgid "Some vendor-specific protocols need a custom ID Generator, you can override the default one by creating a producer.  The OpenTelemetry extension will detect the `IdGenerator` CDI bean and will use it when configuring the tracer producer."
msgstr "一些供应商特定协议需要一个自定义的ID生成器，您可以通过创建一个自定义生成器来覆盖默认的ID。OpenTelemetry扩展将检测 `IdGenerator` CDI Bean，并在配置tracer生成器时使用它。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:277
#: upstream/_versions/main/guides/opentelemetry.adoc:454
#, no-wrap
msgid ""
"@Singleton\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:285
#, no-wrap
msgid ""
"    /** Creates a custom IdGenerator for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public IdGenerator idGenerator() {\n"
"        return AwsXrayIdGenerator.getInstance();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:287
#, no-wrap
msgid "Propagators"
msgstr "Propagators"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:290
#, fuzzy
msgid "OpenTelemetry propagates cross-cutting concerns through https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] that will share an underlying `Context` for storing state and accessing data across the lifespan of a distributed transaction."
msgstr "OpenTelemetry通过 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] 来传播横切关注点(cross-cutting concerns)，这些 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/context/api-propagators.md[propagators] 将共享一个底层 `Context` ，用于在分布式事务的生命周期内存储状态和访问数据。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:293
#, fuzzy
msgid "By default, the OpenTelemetry extension enables the https://www.w3.org/TR/trace-context/[W3C Trace Context] and the https://www.w3.org/TR/baggage/[W3C Baggage] propagators, you can however choose any of the supported OpenTelemetry propagators by setting the `propagators` config that is described in the xref:configuration-reference[OpenTelemetry Configuration Reference]."
msgstr "默认情况下，OpenTelemetry扩展启用了 link:https://www.w3.org/TR/trace-context/[W3C Trace Context] 和 link:https://www.w3.org/TR/baggage/[W3C Baggage] propagators，但是您可以通过设置 link:#configuration-reference[[参考配置]] 中描述的 `propagators` 配置来选择任何支持的OpenTelemetry propagators。"

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:294
#, fuzzy, no-wrap
msgid "Additional Propagators"
msgstr "其他配置"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:298
msgid "The `b3`, `b3multi`, `jaeger` and `ottrace` propagators will need the https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] extension to be added as a dependency to your project."
msgstr "`b3` , `b3multi` , `jaeger` 和 `ottrace` propatagors 需要将 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/trace-propagators[trace-propagators] 扩展作为一个依赖添加到您的项目中。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:306
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry</groupId>\n"
"    <artifactId>opentelemetry-extension-trace-propagators</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:312
#, no-wrap
msgid "implementation(\"io.opentelemetry:opentelemetry-extension-trace-propagators\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:316
#, fuzzy
msgid "The `xray` propagator will need the https://github.com/open-telemetry/opentelemetry-java-contrib/tree/main/aws-xray-propagator[aws] extension to be added as a dependency to your project."
msgstr "`xray` propagator需要将 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/extensions/aws[aws] 扩展作为依赖添加到您的项目中。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:324
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.opentelemetry.contrib</groupId>\n"
"    <artifactId>opentelemetry-aws-xray-propagator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:330
#, no-wrap
msgid "implementation(\"io.opentelemetry.contrib:opentelemetry-aws-xray-propagator\")\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:332
#, fuzzy, no-wrap
#| msgid "Propagators"
msgid "Customise Propagator"
msgstr "Propagators"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:335
msgid "To customise the propagation header you can implement the `TextMapPropagatorCustomizer` interface. This can be used, as an example, to restrict propagation of OpenTelemetry trace headers and prevent potentially sensitive data to be sent to third party systems."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:338
msgid "```java /**"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:339
msgid "/**"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:340
msgid "Meant to be implemented by a CDI bean that provides arbitrary customization for the TextMapPropagator"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:341
msgid "that are to be registered with OpenTelemetry"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:343
#, no-wrap
msgid ""
"*/\n"
"public interface TextMapPropagatorCustomizer {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:345
#, no-wrap
msgid "    TextMapPropagator customize(Context context);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:348
#, no-wrap
msgid ""
"    interface Context {\n"
"        TextMapPropagator propagator();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:353
#, no-wrap
msgid ""
"        ConfigProperties otelConfigProperties();\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:354
#, no-wrap
msgid "Resource"
msgstr "资源"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:357
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[resource] is a representation of the entity that is producing telemetry, it adds attributes to the exported trace to characterize who is producing the trace."
msgstr "Opentelemetry link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#resources[资源] 是产生telemetry的实体的表示，它向输出的trace中添加属性，用以描述谁在产生trace。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:361
#, fuzzy
msgid "You can add attributes by setting the `resource-attributes` tracer config that is described in the xref:configuration-reference[OpenTelemetry Configuration Reference].  Since this property can be overridden at runtime, the OpenTelemetry extension will pick up its value following the order of precedence that is described in the xref:config-reference.adoc#configuration-sources[Quarkus Configuration Reference]."
msgstr "您可以通过设置 link:#configuration-reference[[参考设置]] 中的 `resource-attributes` tracer 配置来添加属性。由于这个属性可以在运行时被覆盖，OpenTelemetry扩展将按照 link:config-reference.html#configuration_sources[Quarkus参考配置] 中描述的优先顺序来获取其值。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:364
msgid "If by any means you need to use a custom resource or one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create multiple resource producers. The OpenTelemetry extension will detect the `Resource` CDI beans and will merge them when configuring the tracer producer."
msgstr "如果通过您需要的任何方式来使用自定义的资源或由 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK扩展] 之一提供的资源，您可以创建多个资源生产者。OpenTelemetry扩展将检测 `Resource` CDI beans，并在配置tracer生成器时将其合并。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:369
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:375
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource osResource() {\n"
"        return OsResource.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:382
#, no-wrap
msgid ""
"    @Produces\n"
"    @ApplicationScoped\n"
"    public Resource ecsResource() {\n"
"        return EcsResource.get();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:384
#, no-wrap
msgid "User data"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:387
msgid "By setting `quarkus.otel.traces.eusp.enabled=true` you can add information about the user related to each span. The user's ID and roles will be added to the span attributes, if available."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:389
#, no-wrap
msgid "Sampler"
msgstr "采样器(Sampler)"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:391
#, fuzzy
#| msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be sampled and exported, controlling noise and overhead by reducing the number of sample of traces collected and sent to the collector."
msgid "A https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[sampler] decides whether a trace should be discarded or forwarded, effectively managing noise and reducing overhead by limiting the number of collected traces sent to the collector."
msgstr "Opentelemetry link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#sampling[采样器] 决定了是否应该对一个trace进行采样和输出，通过减少收集和发送至exporter的trace样本数量来控制噪音和开销。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:393
#, fuzzy
msgid "Quarkus comes equipped with a https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[built-in sampler], and you also have the option to create your custom sampler."
msgstr "您可以通过设置 link:#configuration-reference[[参考配置]] 中提到的必要的采样器配置来简单地设置一个 link:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/sdk.md#built-in-samplers[内置采样器]。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:395
msgid "To use the built-in sampler, you can configure it by setting the desired sampler parameters as detailed in the xref:configuration-reference[OpenTelemetry Configuration Reference]. As an example, you can configure the sampler to retain 50% of the traces:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:401
#, no-wrap
msgid ""
"# build time property only:\n"
"quarkus.otel.traces.sampler=traceidratio\n"
"# Runtime property:\n"
"quarkus.otel.traces.sampler.arg=0.5\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:406
msgid "An interesting use case for the sampler is to activate and deactivate tracing export at runtime, acording to this example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:414
#, no-wrap
msgid ""
"# build time property only:\n"
"quarkus.otel.traces.sampler=traceidratio\n"
"# On (default). All traces are exported:\n"
"quarkus.otel.traces.sampler.arg=1.0\n"
"# Off. No traces are exported:\n"
"quarkus.otel.traces.sampler.arg=0.0\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:420
msgid "Quarkus 3.0 introduced breaking changes on the configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:422
msgid "Sampler related property names and values change to comply with the latest Java OpenTelemetry SDK. During a transition period it will be possible to set the new configuration values in the old property because we are mapping `quarkus.opentelemetry.tracer.sampler` -> `quarkus.otel.traces.sampler`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:424
msgid "If the sampler is parent based, there is no need to set, the now dropped property, `quarkus.opentelemetry.tracer.sampler.parent-based`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:426
msgid "The values you need to set on `quarkus.opentelemetry.tracer.sampler` are now:"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:428
#, no-wrap
msgid "Old Sampler config value"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:428
#, no-wrap
msgid "New Sampler config valu"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:430
#, no-wrap
msgid "New Sampler config value (Parent based)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:431
#, no-wrap
msgid "`on`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:432
#, no-wrap
msgid "`always_on`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:434
#, no-wrap
msgid "`parentbased_always_on`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:435
#, no-wrap
msgid "`off`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:436
#, no-wrap
msgid "`always_off`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:438
#, no-wrap
msgid "`parentbased_always_off`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:439
#, no-wrap
msgid "`ratio`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:440
#, no-wrap
msgid "`traceidratio`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/opentelemetry.adoc:441
#, no-wrap
msgid "`parentbased_traceidratio`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:445
msgid "If you need to use a custom sampler there are now 2 different ways:"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:446
#, no-wrap
msgid "Sampler CDI Producer"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/opentelemetry.adoc:449
#, fuzzy
msgid "You can create a sampler CDI producer. The Quarkus OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the Tracer."
msgstr "一些供应商特定协议需要一个自定义的ID生成器，您可以通过创建一个自定义生成器来覆盖默认的ID。OpenTelemetry扩展将检测 `IdGenerator` CDI Bean，并在配置tracer生成器时使用它。"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:464
#, no-wrap
msgid ""
"    /** Creates a custom sampler for OpenTelemetry */\n"
"    @Produces\n"
"    @Singleton\n"
"    public Sampler sampler() {\n"
"        return JaegerRemoteSampler.builder()\n"
"        .setServiceName(\"my-service\")\n"
"        .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/opentelemetry.adoc:466
#, fuzzy, no-wrap
msgid "OTel Sampler SPI"
msgstr "采样器(Sampler)"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:470
msgid "This will use the SPI hooks available with the OTel Autoconfiguration.  You can create a simple Sampler class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:483
#, no-wrap
msgid ""
"public class CustomSPISampler implements Sampler {\n"
"    @Override\n"
"    public SamplingResult shouldSample(Context context,\n"
"            String s,\n"
"            String s1,\n"
"            SpanKind spanKind,\n"
"            Attributes attributes,\n"
"            List<LinkData> list) {\n"
"        // Do some sampling here\n"
"        return Sampler.alwaysOn().shouldSample(context, s, s1, spanKind, attributes, list);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:489
#, no-wrap
msgid ""
"    @Override\n"
"    public String getDescription() {\n"
"        return \"custom-spi-sampler-description\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:492
msgid "Then a Sampler Provider:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:499
#, no-wrap
msgid ""
"public class CustomSPISamplerProvider implements ConfigurableSamplerProvider {\n"
"    @Override\n"
"    public Sampler createSampler(ConfigProperties configProperties) {\n"
"        return new CustomSPISampler();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:505
#, no-wrap
msgid ""
"    @Override\n"
"    public String getName() {\n"
"        return \"custom-spi-sampler\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:507
msgid "Write the SPI loader text file at `resources/META-INF/services` with name `io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider` containing the full qualified name of the `CustomSPISamplerProvider` class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:509
#, fuzzy
msgid "Then activate on the configuration:"
msgstr "创建配置"

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:512
#, no-wrap
msgid "quarkus.otel.traces.sampler=custom-spi-sampler\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:515
msgid "As you can see, CDI is much simpler to work with."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:516
#, no-wrap
msgid "Additional instrumentation"
msgstr "其他的植入(instrumentation)"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:520
msgid "Some Quarkus extensions will require additional code to ensure traces are propagated to subsequent execution.  These sections will outline what is necessary to propagate traces across process boundaries."
msgstr "一些Quarkus扩展需要额外的代码来确保traces被传播到后续执行中。以下章节将展示跨越进程边界传播traces的必要条件。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:522
msgid "The instrumentation documented in this section has been tested with Quarkus and works in both standard and native mode."
msgstr "本节中用到的植入方式已经过Quarkus测试，并且在标准和本地模式下都能工作。"

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:523
#, no-wrap
msgid "CDI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:527
#, fuzzy
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.instrumentation.annotations.WithSpan` annotation will create a new Span and establish any required relationships with the current Trace context."
msgstr "在任何CDI可感知的Bean中用 `io.opentelemetry.extension.annotations.WithSpan` 注解来注释一个方法将会创建一个新的Span，并与当前Trace上下文建立所需要的任何关系。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:529
#, fuzzy
msgid "Annotating a method in any CDI aware bean with the `io.opentelemetry.instrumentation.annotations.AddingSpanAttributes` will not create a new span but will add annotated method parameters to attributes in the current span."
msgstr "在任何CDI可感知的Bean中用 `io.opentelemetry.extension.annotations.WithSpan` 注解来注释一个方法将会创建一个新的Span，并与当前Trace上下文建立所需要的任何关系。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:531
msgid "If a method is annotated by mistake with `@AddingSpanAttributes` and `@WithSpan` annotations, the `@WithSpan` annotation will take precedence."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:534
#, fuzzy
msgid "Method parameters can be annotated with the `io.opentelemetry.instrumentation.annotations.SpanAttribute` annotation to indicate which method parameters should be part of the span. The parameter name can be customized as well."
msgstr "方法参数可以使用 `io.opentelemetry.extension.annotations.SpanAttribute` 注解进行注释，来表示哪些方法参数是包含在Trace中的。"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:536
msgid "Example:"
msgstr "例如："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:542
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class SpanBean {\n"
"    @WithSpan\n"
"    void span() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:544
#: upstream/_versions/main/guides/opentelemetry.adoc:549
#: upstream/_versions/main/guides/opentelemetry.adoc:554
#: upstream/_versions/main/guides/opentelemetry.adoc:559
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:547
#, no-wrap
msgid ""
"    @WithSpan(\"name\")\n"
"    void spanName() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:552
#, no-wrap
msgid ""
"    @WithSpan(kind = SERVER)\n"
"    void spanKind() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:557
#, no-wrap
msgid ""
"    @WithSpan\n"
"    void spanArgs(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:562
#, no-wrap
msgid ""
"    @AddingSpanAttributes\n"
"    void addArgumentToExistingSpan(@SpanAttribute(value = \"arg\") String arg) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:565
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:567
#, no-wrap
msgid "Available OpenTelemetry CDI injections"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:571
msgid "As per MicroProfile Telemetry Tracing specification, Quarkus supports the CDI injections of the following classes:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:573
msgid "`io.opentelemetry.api.OpenTelemetry`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:574
msgid "`io.opentelemetry.api.trace.Tracer`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:575
msgid "`io.opentelemetry.api.trace.Span`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:576
msgid "`io.opentelemetry.api.baggage.Baggage`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:578
msgid "You can inject these classes in any CDI enabled bean. For instance, the `Tracer` is particularly useful to start custom spans:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:583
#, no-wrap
msgid ""
"@Inject\n"
"Tracer tracer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:585
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:592
#, no-wrap
msgid ""
"public void tracedWork() {\n"
"    Span span = tracer.spanBuilder(\"My custom span\")\n"
"        .setAttribute(\"attr\", \"attr.value\")\n"
"        .setParent(Context.current().with(Span.current()))\n"
"        .setSpanKind(SpanKind.INTERNAL)\n"
"        .startSpan();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:594
#, no-wrap
msgid "    // traced work\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:597
#, no-wrap
msgid ""
"    span.end();\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:599
#, no-wrap
msgid "SmallRye Reactive Messaging - Kafka"
msgstr "SmallRye Reactive Messaging - Kafka"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:603
msgid "When using the SmallRye Reactive Messaging extension for Kafka, we are able to propagate the span into the Kafka Record with:"
msgstr "当使用 SmallRye Reactive Messaging  的 Kafka 扩展时，我们可以向Kafka记录中传播span，通过："

#. type: delimited block -
#: upstream/_versions/main/guides/opentelemetry.adoc:608
#, no-wrap
msgid ""
"TracingMetadata tm = TracingMetadata.withPrevious(Context.current());\n"
"Message out = Message.of(...).withMetadata(tm);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:612
#, fuzzy
msgid "The above creates a `TracingMetadata` object we can add to the `Message` being produced, which retrieves the OpenTelemetry `Context` to extract the current span for propagation."
msgstr "以上代码创建了一个 `Metadata` 对象，我们可以将该对象添加到生成的 `Message` 中，并且该对象可以获取OpenTelemetry的 `Context` 来抽取当前的span用以传播。"

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:613
#, no-wrap
msgid "Exporters"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:615
#, no-wrap
msgid "Default"
msgstr "默认值"

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:618
msgid "The Quarkus OpenTelemetry extension uses its own exporter built on top of Vert.x for optimal performance and maintainability."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:620
msgid "The exporter is automatically wired with CDI, that's why the `quarkus.otel.traces.exporter` property defaults to `cdi`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:622
msgid "The `quarkus.otel.exporter.otlp.traces.protocol` default to `grpc` and `http/protobuf` can also be used."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/opentelemetry.adoc:623
#, no-wrap
msgid "On Quarkiverse"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:625
msgid "Additional exporters will be available in the Quarkiverse https://github.com/quarkiverse/quarkus-opentelemetry-exporter/blob/main/README.md[quarkus-opentelemetry-exporter] project."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:627
#, no-wrap
msgid "Quarkus core extensions instrumented with OpenTelemetry tracing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:630
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-agroal[`quarkus-agroal`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:631
msgid "https://quarkus.io/guides/grpc-getting-started[`quarkus-grpc`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:632
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-jaxrs-client-reactive[`quarkus-jaxrs-client-reactive`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:633
msgid "https://quarkus.io/guides/resteasy[`quarkus-resteasy-jackson`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:634
msgid "https://quarkus.io/guides/resteasy-reactive[`quarkus-resteasy-reactive`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:635
msgid "https://quarkus.io/guides/rest-client[`quarkus-rest-client`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:636
msgid "https://quarkus.io/guides/scheduler[`quarkus-scheduler`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:637
msgid "https://quarkus.io/guides/smallrye-graphql[`quarkus-smallrye-graphql`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:638
msgid "https://quarkus.io/extensions/io.quarkus/quarkus-smallrye-reactive-messaging[`quarkus-smallrye-reactive-messaging`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:639
msgid "AMQP 1.0"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:640
msgid "RabbitMQ"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:641
msgid "Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:642
msgid "Pulsar"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:643
msgid "https://quarkus.io/guides/vertx[`quarkus-vertx`] (http requests)"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/opentelemetry.adoc:645
#, no-wrap
msgid "OpenTelemetry Configuration Reference"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:651
msgid "Quarkus supports the OpenTelemetry Autoconfiguration for Traces.  The configurations match what you can see at https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk-extensions/autoconfigure/README.md[OpenTelemetry SDK Autoconfigure] adding the usual `quarkus.*` prefix."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:653
msgid "Quarkus OpenTelemetry configuration properties now have the `quarkus.otel.*` prefix."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/opentelemetry.adoc:655
#, no-wrap
msgid "*The legacy properties* with prefix `quarkus.opentelemetry.*` are currently being mapped to the new ones as a default, during a transition period. See Default column in the details below.\n"
msgstr ""

#, fuzzy
#~| msgid "Using OpenTelemetry"
#~ msgid "OpenTelemetry exporter"
#~ msgstr "使用OpenTelemetry"

#, fuzzy
#~ msgid "There are two ways to configure the default OTLP gRPC Exporter within the application."
#~ msgstr "有两种方法可以在应用程序中配置OTLP gRPC exporter。"

#~ msgid "The first approach is by providing the properties within the `src/main/resources/application.properties` file:"
#~ msgstr "第一种方法是通过在 `src/main/resources/application.properties` 文件内提供配置:"

#~ msgid "Whether OpenTelemetry is enabled or not. The default is `true`, but shown here to indicate how it can be disabled"
#~ msgstr "OpenTelemetry是否已启用。默认是 `true` ，但放在这里是用来展示如何禁用它"

#~ msgid "gRPC endpoint for sending spans"
#~ msgstr "用于发送spans的gRPC节点"

#~ msgid "Configure the OpenTelemetry Collector by creating an `otel-collector-config.yaml` file:"
#~ msgstr "通过创建一个 `otel-collector-config.yaml` 文件来配置OpenTelemetry Collector："

#~ msgid "If you need to use a custom sampler or to use one that is provided by one of the https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK Extensions] you can create a sampler producer. The OpenTelemetry extension will detect the `Sampler` CDI bean and will use it when configuring the tracer producer."
#~ msgstr "如果您需要使用一个自定义的采样器或使用一个由 link:https://github.com/open-telemetry/opentelemetry-java/tree/main/sdk-extensions[OpenTelemetry SDK扩展] 提供的采样器，您可以创建一个采样器生成器。OpenTelemetry扩展将检测到 `Sampler` CDI bean，并在配置tracer生成器时使用它。"

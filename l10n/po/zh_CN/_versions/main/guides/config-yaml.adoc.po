# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-11-23 02:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/config-yaml.adoc:6
#, fuzzy, no-wrap
#| msgid "Enabling YAML Configuration"
msgid "YAML configuration"
msgstr "启用YAML配置"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:15
msgid "You can use a YAML file,`application.yaml`, to configure your {project-name} application instead of the standard Java properties file, `application.properties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:17
msgid "link:https://en.wikipedia.org/wiki/YAML[YAML] is widely used for defining resource descriptors, especially in Kubernetes."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/config-yaml.adoc:18
#, fuzzy, no-wrap
#| msgid "Enabling YAML Configuration"
msgid "Enable YAML configuration"
msgstr "启用YAML配置"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:21
msgid "To enable YAML configuration, add the `quarkus-config-yaml` extension:"
msgstr "要启用YAML配置，添加以下 `quarkus-config-yaml` 扩展:"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:26
#, fuzzy
#| msgid "You can also just add the following dependency into your project:"
msgid "Alternatively, add the following dependency to your project:"
msgstr "你也可以直接将以下依赖添加到你的项目中:"

#. type: Block title
#: upstream/_versions/main/guides/config-yaml.adoc:28
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:34
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-config-yaml</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/config-yaml.adoc:37
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:40
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-config-yaml\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:43
#, fuzzy
#| msgid "Remove the `src/main/resources/application.properties` and create a `src/main/resources/application.yaml` file."
msgid "After adding the extension or dependency, to avoid confusion, remove the `src/main/resources/application.properties` file and create a `src/main/resources/application.yaml` file."
msgstr "删除 `src/main/resources/application.properties` ，并创建一个 `src/main/resources/application.yaml` 文件。"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:45
msgid "If both files are present, {project-name} gives precedence to properties in the YAML file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:47
#, fuzzy
#| msgid "Quarkus supports both the `yml` and `yaml` file extensions."
msgid "{project-name} recognizes both `.yml` and `.yaml` file extensions."
msgstr "Quarkus同时支持 `yml` 和 `yaml` 文件扩展名。"

#. type: Title ===
#: upstream/_versions/main/guides/config-yaml.adoc:48
#, fuzzy, no-wrap
#| msgid "Enabling YAML Configuration"
msgid "Example YAML configurations"
msgstr "启用YAML配置"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:51
#, fuzzy
#| msgid "The following snippets provide examples of YAML configuration:"
msgid "The following snippets give examples of YAML configurations:"
msgstr "以下代码段提供了YAML配置的示例:"

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:60
#, no-wrap
msgid ""
"# YAML supports comments\n"
"quarkus:\n"
"  datasource:\n"
"    db-kind: postgresql\n"
"    jdbc:\n"
"      url: jdbc:postgresql://localhost:5432/some-database\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:66
#, no-wrap
msgid ""
"# REST Client configuration property\n"
"quarkus:\n"
"  rest-client:\n"
"    org.acme.rest.client.ExtensionsService:\n"
"      url: https://stage.code.quarkus.io/api\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:76
#, no-wrap
msgid ""
"# For configuration property names that use quotes, do not split the string inside the quotes\n"
"quarkus:\n"
"  log:\n"
"    category:\n"
"      \"io.quarkus.category\":\n"
"        level: INFO\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:83
#, no-wrap
msgid ""
"quarkus:\n"
"  datasource:\n"
"    url: jdbc:postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:87
#, no-wrap
msgid ""
"  hibernate-orm:\n"
"    database:\n"
"      generation: drop-and-create\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:92
#, no-wrap
msgid ""
"  oidc:\n"
"    enabled: true\n"
"    auth-server-url: http://localhost:8180/auth/realms/quarkus\n"
"    client-id: app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:99
#, no-wrap
msgid ""
"app:\n"
"  frontend:\n"
"    oidc-realm: quarkus\n"
"    oidc-app: app\n"
"    oidc-server: http://localhost:8180/auth\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:111
#, no-wrap
msgid ""
"# With profiles\n"
"\"%test\":\n"
"   quarkus:\n"
"     oidc:\n"
"       enabled: false\n"
"     security:\n"
"        users:\n"
"            file:\n"
"              enabled: true\n"
"              realm-name: quarkus\n"
"              plain-text: true\n"
msgstr ""
"# 使用环境\n"
"\"%test\":\n"
"   quarkus:\n"
"     oidc:\n"
"       enabled: false\n"
"     security:\n"
"        users:\n"
"            file:\n"
"              enabled: true\n"
"              realm-name: quarkus\n"
"              plain-text: true\n"

#. type: Title ==
#: upstream/_versions/main/guides/config-yaml.adoc:113
#, no-wrap
msgid "Profiles"
msgstr "配置文件"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:116
#, fuzzy
#| msgid "As you can see in the previous snippet, you can use xref:config-reference.adoc#profiles[profiles] in YAML. The profile key requires double quotes: `\"%test\"`. This is because YAML does not support keys starting with `%`."
msgid "As you can see in the previous snippet, you can use xref:{doc-guides}/config-reference.adoc#profiles[profiles] in YAML."
msgstr "正如你在之前的代码片段中所看到的，你可以在YAML中使用 link:config-reference.html#profiles[profiles] 。该环境配置的key 需要使用双引号: `\"%test\"` 。这是因为YAML不支持以 `%` 开始的键。"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:121
msgid "In YAML, keys that begin with `%` are not allowed.  However, profile keys must start with this symbol.  To resolve this, enclose the profile keys in double quotes, as demonstrated by the example, `\"%test\"`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:125
#, fuzzy
#| msgid "Everything under the `\"%test\"` key is only enabled when the `test` profile is active. For example, in the previous snippet it disables OIDC (`quarkus.oidc.enabled: false`), whereas without the `test` profile, it would be enabled."
msgid "All configurations under the `\"%test\"` key activate only when the `test` profile is enabled.  For instance, the previous snippet shows that OpenID Connect (OIDC) (`quarkus.oidc.enabled: false`) is disabled when the `test` profile is active.  Without the `test` profile, OIDC is enabled by default."
msgstr "只有当 `test` 环境配置处于激活状态时， `\"%test\"` 键下的所有内容才会被启用。例如在前面的代码片段中，它禁用了OIDC ( `quarkus.oidc.enabled: false` )，反之，如果没有 `test` 环境配置，它将会被启用。"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:127
msgid "You can also define custom profiles, such as `%staging` in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:133
#: upstream/_versions/main/guides/config-yaml.adoc:151
#, no-wrap
msgid ""
"quarkus:\n"
"  http:\n"
"    port: 8081\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:138
#, no-wrap
msgid ""
"\"%staging\":\n"
"    quarkus:\n"
"        http:\n"
"          port: 8082\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:141
#, fuzzy
#| msgid "If you enable the `staging` profile, the HTTP port will be 8082, whereas it would be 8081 otherwise."
msgid "If you enable the `staging` profile, the HTTP port is set to `8082` instead of `8081`."
msgstr "如果你启用了 `staging` 环境配置，HTTP 端口将会是 8082，反之，端口将会是 8081。"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:145
#, fuzzy
#| msgid "The YAML configuration also support profile aware files. In this case, properties for a specific profile may reside in an `application-{profile}.yaml` named file. The previous example may be expressed as:"
msgid "The YAML configuration also supports profile-aware files.  In this case, properties for a specific profile can reside in an `application-{profile}.yaml` named file.  The previous example can be expressed as:"
msgstr "YAML 配置还支持环境配置文件的感知。在这种情况下，特定环境下的配置文件的属性可以书写在一个名为 `application-{profile}.yaml` 的文件中。前面的例子也可以表示为:"

#. type: Block title
#: upstream/_versions/main/guides/config-yaml.adoc:153
#, no-wrap
msgid "application-staging.yaml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:159
#, no-wrap
msgid ""
"quarkus:\n"
"  http:\n"
"    port: 8082\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/config-yaml.adoc:161
#, no-wrap
msgid "Expressions"
msgstr "表达式"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:164
#, fuzzy
msgid "The YAML format also supports xref:config-reference.adoc#property-expressions[property expressions], by using the same format as Java properties:"
msgstr "YAML格式同时也支持 link:config-reference.html#expressions[表达式] ，使用与Java Properties相同的格式:"

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:170
#, no-wrap
msgid ""
"mach: 3\n"
"x:\n"
"  factor: 2.23694\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:176
#, no-wrap
msgid ""
"display:\n"
"  mach: ${mach}\n"
"  unit:\n"
"    name: \"mph\"\n"
"    factor: ${x.factor}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:179
#, fuzzy
msgid "You can reference nested properties by using the `.` (dot) separator, as in `${x.factor}`."
msgstr "注意，你可以使用 `.` (点)分隔符来引用嵌套的属性，如 `{x.factor}` 。"

#. type: Title ==
#: upstream/_versions/main/guides/config-yaml.adoc:180
#, no-wrap
msgid "External application.yaml file"
msgstr "外部application.yaml 文件"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:184
#, fuzzy
msgid "The `application.yaml` file can also be placed in `config/application.yaml` to specialize the runtime configuration.  The file must be present in the root of the working directory relative to the {project-name} application runner:"
msgstr "`application.yaml` 文件也可以放在 `config/application.yaml` 中，以专门实现运行时的配置。该文件必须存在于相对Quarkus应用运行程序的工作目录的根目录中:"

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:191
#, no-wrap
msgid ""
".\n"
"├── config\n"
"│    └── application.yaml\n"
"├── my-app-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:194
#, fuzzy
#| msgid "The values from this file override any values from the regular `application.yaml` file if exists."
msgid "The values from this file override any values from the regular `application.yaml` file if it exists."
msgstr "如果存在的话，此文件中的值将覆盖常规 `application.yaml` 文件中的任何值。"

#. type: Title ==
#: upstream/_versions/main/guides/config-yaml.adoc:195
#, no-wrap
msgid "Configuration key conflicts"
msgstr "配置键冲突"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:201
#, fuzzy
#| msgid "The MicroProfile Config specification defines configuration keys as an arbitrary `.`-delimited string. However, structured formats like YAML only support a subset of the possible configuration namespace. For example, consider the two configuration properties `quarkus.http.cors` and `quarkus.http.cors.methods`. One property is the prefix of another, so it may not be immediately evident how to specify both keys in your YAML configuration."
msgid "The MicroProfile Config specification defines configuration keys as an arbitrary `.`-delimited string.  However, structured formats such as YAML only support a subset of the possible configuration namespace.  For example, consider the two configuration properties `quarkus.http.cors` and `quarkus.http.cors.methods`.  One property is the prefix of another, so it might not be immediately evident how to specify both keys in your YAML configuration."
msgstr "MicroProfile Config 规范将配置键定义为任意的 `.` - 分隔字符串。然而，像 YAML 这样的结构化格式可能只支持配置命名空间的一个子集。例如，考虑有两个配置属性 `quarkus.http.cors` 和 `quarkus.http.cors.methods` 的情况。一个属性是另一个属性的前缀，因此如何在 YAML 配置中指定这两个键可能不是很明确。"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:203
#, fuzzy
#| msgid "This is solved by using a `null` key (represented by `~`) for any YAML property which is a prefix of another one:"
msgid "This is solved by using `~` as a `null` key to represent any YAML property that is a prefix of another one:"
msgstr "这可以通过为任意YAML属性使用 `null` 键（以 `~` 为代表）来解决，该属性是另一个属性的前缀:"

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:211
#, no-wrap
msgid ""
"quarkus:\n"
"  http:\n"
"    cors:\n"
"      ~: true\n"
"      methods: GET,PUT,POST\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:214
#, fuzzy
#| msgid "YAML `null` keys are not included in the assembly of the configuration property name, allowing them to be used in any level for disambiguating configuration keys."
msgid "YAML `null` keys are not included in the assembly of the configuration property name, allowing them to be used at any level for disambiguating configuration keys."
msgstr "YAML `null` 键不被包含在配置属性名称的程序集中，允许在任意级别使用它们来消除配置键的歧义。"

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:216
msgid "Although Quarkus primarily uses `.properties` file extension for configuration, the snakeyaml library, which is used for parsing YAML in Quarkus, can also parse JSON structures. This means you can use YAML files with JSON content inside."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:218
msgid "YAML and JSON structures can be read in an application.yaml file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:220
msgid "Certainly, here's a step-by-step guide on how to use complex configuration structures with Quarkus:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:222
msgid "Define Your Configuration Interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:227
#, no-wrap
msgid ""
"@ConfigMapping(prefix = \"server\")\n"
"public interface ServiceConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:229
#, no-wrap
msgid "  List<Environment> environments();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:235
#, no-wrap
msgid ""
"  interface Environment {\n"
"    String name();\n"
"    String services();\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/config-yaml.adoc:238
msgid "Create the appropriate JSON structure and store it in a YAML file."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/config-yaml.adoc:255
#, no-wrap
msgid ""
"{\n"
"  \"server\": {\n"
"    \"environments\": [\n"
"      {\n"
"        \"name\": \"dev\",\n"
"        \"services\": \"bookstore\"\n"
"      },\n"
"      {\n"
"        \"name\": \"batch\",\n"
"        \"services\": \"warehouse\"\n"
"      }\n"
"    ]\n"
"  }\n"
"}\n"
msgstr ""

#~ msgid "https://en.wikipedia.org/wiki/YAML[YAML] is a very popular format. Kubernetes relies heavily on the YAML format to write the various resource descriptors."
#~ msgstr "link:https://en.wikipedia.org/wiki/YAML[YAML] 是一种非常流行的格式。Kubernetes高度依赖YAML格式来编写各种资源描述符。"

#~ msgid "Quarkus offers the possibility to use YAML in addition to the standard Java Properties file."
#~ msgstr "除了标准的 Java Properties 文件之外，Quarkus 还提供了使用 YAML 的能力。"

#~ msgid "If both are present, Quarkus prioritizes configuration properties from the YAML file first and then from the Properties file. However, to avoid confusion, we recommend removing the Properties file."
#~ msgstr "如果两者都存在，Quarkus会优先考虑YAML文件中的配置属性，接着是 Properties 文件中的配置属性。然而，为了避免混淆，我们建议删除 Properties 文件。"

#~ msgid "Example"
#~ msgstr "例子"

#~ msgid "As for the Java Properties format, you can define your own profile:"
#~ msgstr "至于Java Properties 格式，你可以定义你自己的环境配置:"

# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-12 02:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: _versions/main/guides/rest-client.adoc
msgid "Using the REST Client"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"This guide explains how to use the REST Client in order to interact with REST APIs.\n"
"REST Client is the REST Client implementation compatible with Quarkus REST (formerly RESTEasy Reactive)."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"If your application uses a client and exposes REST endpoints, please use xref:rest.adoc[Quarkus REST]\n"
"for the server part."
msgstr ""

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#: _versions/main/guides/rest-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "我们建议您按照下一节的说明逐步创建应用程序。然而，您可以直接转到已完成的示例。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The solution is located in the `rest-client-quickstart` link:{quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr "该解决方案位于 `rest-client-quickstart` {quickstarts-tree-url}/rest-client-quickstart[目录]中。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "创建Maven项目"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "首先，我们需要一个新的项目。使用以下命令创建一个新的项目:"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "该命令生成带有REST端点的Maven项目并导入。"

#: _versions/main/guides/rest-client.adoc
msgid "the `rest-jackson` extension for the REST server support. Use `rest` instead if you do not wish to use Jackson;"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "the `rest-client-jackson` extension for the REST client support. Use `rest-client` instead if you do not wish to use Jackson"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `rest-client-jackson` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Setting up the model"
msgstr "设置模型"

#: _versions/main/guides/rest-client.adoc
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr ""

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "创建一个 `src/main/java/org/acme/rest/client/Extension.java` 文件并设置以下内容。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上面的模型只是该服务提供的字段的一个子集，但对于本指南的目的来说已经足够了。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Create the interface"
msgstr "创建接口"

#: _versions/main/guides/rest-client.adoc
msgid "Using the REST Client is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr " `getById` 方法使我们的代码能够从Code Quarkus API中通过id获得一个扩展。客户端将处理所有的网络和编组，使我们的代码不受这些技术细节的影响。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上述代码中的注释的目的如下。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr "`@RegisterRestClient` 允许 Quarkus 知道该接口将作为 REST 客户端用于 CDI 注入"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service"
msgstr " `@Path` , `@GET` 和 `@PathParam` 是标准的 JAX-RS 注解，用于定义如何访问服务。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"When the `quarkus-rest-client-jackson` extension is installed, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr ""

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable."
msgstr "如果不依赖 JSON 默认值，强烈建议使用 `@Produces` 和 `@Consumes` 注释来注解端点，以精确定义预期的内容类型。这样可以减少本地可执行文件中包含的 Jakarta REST 提供程序（可视为转换器）的数量。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"The `getById` method above is a blocking call. It should not be invoked on the event loop.\n"
"The <<async-support>> section describes how to make non-blocking calls."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Query Parameters"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"The easiest way to specify a query parameter is to annotate a client method parameter with the `@QueryParam` or the `@RestQuery`.\n"
"The `@RestQuery` is equivalent of the `@QueryParam`, but with optional name. Additionally, it can be also used to pass query parameters\n"
"as a `Map`, which is convenient if parameters are not known in advance."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Request query will include parameter with key `name`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Each `Map` entry represents exactly one query parameter"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`MultivaluedMap` allows you to send array values"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Using @ClientQueryParam"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"Another way to add query parameters to a request is to use `@io.quarkus.rest.client.reactive.ClientQueryParam` on either the REST client interface or a specific method of the interface.\n"
"The annotation can specify the query parameter name while the value can either be a constant, a configuration property or it can be determined by invoking a method."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The following example shows the various possible usages:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"By placing `@ClientQueryParam` on the interface, we ensure that `my-param` will be added to all requests of the client.\n"
"Because we used the `${...}` syntax, the actual value of the parameter will be obtained using the `my.property-value` configuration property."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "When `getWithOtherParam` is called, in addition to the `my-param` query parameter, `some-other-param` with the value of `other` will also be added."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "when `getFromMethod` is called, in addition to the `my-param` query parameter, `param-from-method` with the value of `test` (because that's what the `withParam` method returns when invoked with `param-from-method`) will also be added."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"Note that if an interface method contains an argument annotated with `@QueryParam`, that argument will take\n"
"priority over anything specified in any `@ClientQueryParam` annotation."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[`@ClientQueryParam`]."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Form Parameters"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Form parameters can be specified using `@RestForm` (or `@FormParam`) annotations:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Using @ClientFormParam"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Form parameters can also be specified using `@ClientFormParam`, similar to `@ClientQueryParam`:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[`@ClientFormParam`]."
msgstr ""

#. type: Title ===
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Path Parameters"
msgstr "路径参数"

#: _versions/main/guides/rest-client.adoc
msgid ""
"If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of\n"
"(or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Using ClientMultipartForm"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "MultipartForm can be built using the Class `ClientMultipartForm` which supports building the form as needed:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`ClientMultipartForm` can be programmatically created with custom inputs and/or from `MultipartFormDataInput` and/or from custom Quarkus REST Input annotated with `@RestForm` if received."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "input to the method is a custom Generic `ClientMultipartForm` which matches external application api contract."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "More information about this Class and supported methods can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus.resteasy.reactive/resteasy-reactive-client/latest/org/jboss/resteasy/reactive/client/api/ClientMultipartForm.html[`ClientMultipartForm`]."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Build `ClientMultipartForm` from `MultipartFormDataInput` programmatically"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`MultipartFormDataInput` inputForm supported by Quarkus REST (Server)."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Creating a `ClientMultipartForm` object to populate with various dataparts."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Adding InMemory `FileItem` to `ClientMultipartForm`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Adding physical `FileItem` to `ClientMultipartForm`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Adding any attribute directly to `ClientMultipartForm` if not `FileItem`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Build `ClientMultipartForm` from custom Attributes annotated with `@RestForm`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`MultiPartPayloadFormData` custom Object created to match the API contract for calling service which needs to be converted to `ClientMultipartForm`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Adding attribute `jsonPayload` directly to `ClientMultipartForm`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Adding `FileUpload` objects to `ClientMultipartForm` as binaryFileUpload with contentType."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Sending large payloads"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The REST Client is capable of sending arbitrarily large HTTP bodies without buffering the contents in memory, if one of the following types is used:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`InputStream`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`Multi<io.vertx.mutiny.core.buffer.Buffer>`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Furthermore, the client can also send arbitrarily large files if one of the following types is used:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`File`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`Path`"
msgstr ""

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Create the configuration"
msgstr "创建配置"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "为了确定 REST 调用的基本 URL，REST 客户端使用了 `application.properties` 中的配置。属性名称需要遵循一定的约定，最好在下面的代码中显示出来："

#: _versions/main/guides/rest-client.adoc
msgid ""
"Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "注意， `org.acme.rest.client.ExtensionsService` _必须_ 与我们在上一节中创建的 `ExtensionsService` 接口的完全合格名称相匹配。"

#: _versions/main/guides/rest-client.adoc
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr ""

#. type: Title ===
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Disabling Hostname Verification"
msgstr "禁用主机名验证"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr "要禁用特定REST客户端的SSL主机名验证，请在配置中添加以下属性。"

#. type: delimited block =
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr "这个设置不应该在生产中使用，因为它将禁用SSL主机名验证。"

#: _versions/main/guides/rest-client.adoc
msgid "HTTP/2 Support"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "HTTP/2 is disabled by default in REST Client. If you want to enable it, you can set:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Alternatively, you can enable the Application-Layer Protocol Negotiation (alpn) TLS extension and the client will negotiate which HTTP version to use over the ones compatible by the server. By default, it will try to use HTTP/2 first and if it's not enabled, it will use HTTP/1.1. If you want to enable it, you can set:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Create the Jakarta REST resource"
msgstr "创建JAX-RS资源"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "创建具有以下内容的 `src/main/java/org/acme/rest/client/ExtensionsResource.java` 文件。"

#: _versions/main/guides/rest-client.adoc
msgid "There are two interesting parts in this listing:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Programmatic client creation with QuarkusRestClientBuilder"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"Instead of annotating the client with `@RegisterRestClient`, and injecting\n"
"a client with `@RestClient`, you can also create REST Client programmatically.\n"
"You do that with the `QuarkusRestClientBuilder`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "With this approach the client interface could look as follows:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "And the service as follows:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The `QuarkusRestClientBuilder` interface is a Quarkus-specific API to programmatically create clients with additional configuration options. Otherwise, you can also use the `RestClientBuilder` interface from the Microprofile API:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Use Custom HTTP Options"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The REST Client internally uses https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[the Vert.x HTTP Client] to make the network connections. The REST Client extensions allows configuring some settings via properties, for example:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`quarkus.rest-client.client-prefix.connect-timeout` to configure the connect timeout in milliseconds."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`quarkus.rest-client.client-prefix.max-redirects` to limit the number of redirects."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "However, there are many more options within the Vert.x HTTP Client to configure the connections. See all the options in the Vert.x HTTP Client Options API in https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[this link]."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "To fully customize the Vert.x HTTP Client instance that the REST Client is internally using, you can provide your custom HTTP Client Options instance via CDI or when programmatically creating your client."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Let's see an example about how to provide the HTTP Client Options via CDI:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Now, all the REST Clients will be using your custom HTTP Client Options."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Another approach is to provide the custom HTTP Client options when creating the client programmatically:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "the client will use the registered HTTP Client options over the HTTP Client options provided via CDI if any."
msgstr ""

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Redirection"
msgstr "重新定向"

#: _versions/main/guides/rest-client.adoc
msgid "A HTTP server can redirect a response to another location by sending a response with a status code that starts with \"3\" and a HTTP header \"Location\" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. We can enable the automatic redirection in REST Client by adding the \"follow-redirects\" property:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients."
msgstr " `quarkus.rest-client.client-prefix.max-redirects` 来限制重定向的数量。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`quarkus.rest-client.<client-prefix>.follow-redirects` to enable redirection for a specific REST client."
msgstr " `quarkus.rest-client.client-prefix.max-redirects` 来限制重定向的数量。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server."
msgstr "如果这个属性为真，那么REST客户端将执行一个新的请求，它从HTTP服务器收到一个重定向响应。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Additionally, we can limit the number of redirections using the property \"max-redirects\"."
msgstr "此外，我们可以使用属性 \"max-redirects \"限制重定向的数量。"

#: _versions/main/guides/rest-client.adoc
msgid "One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods. However, in REST Client, you can provide your custom redirect handler to enable redirection on POST or PUT methods, or to follow a more complex logic, via either using the `@ClientRedirectHandler` annotation, CDI or programmatically when creating your client."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Let's see an example about how to register your own custom redirect handler using the `@ClientRedirectHandler` annotation:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The \"alwaysRedirect\" redirect handler will only be used by the specified REST Client which in this example is the \"ExtensionsService\" client."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Alternatively, you can also provide a custom redirect handler for all your REST Clients via CDI:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Now, all the REST Clients will be using your custom redirect handler."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Another approach is to provide it programmatically when creating the client:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "the client will use the registered redirect handler over the redirect handler provided via CDI if any."
msgstr ""

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Update the test"
msgstr "更新测试"

#: _versions/main/guides/rest-client.adoc
msgid ""
"Next, we need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上面的代码使用了 link:http://rest-assured.io/[REST Assured] 的 link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 功能。"

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Async Support"
msgstr "异步支持"

#: _versions/main/guides/rest-client.adoc
msgid ""
"To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client extension,\n"
"which comes with support for `CompletionStage` and `Uni`.\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "打开 `src/main/java/org/acme/rest/client/ExtensionsResource.java` 文件，用以下内容更新它。"

#: _versions/main/guides/rest-client.adoc
msgid ""
"Please note that since the invocation is now non-blocking, the `idAsync` method will be invoked on the event loop,\n"
"i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization.\n"
"See xref:rest.adoc#execution-model[Quarkus REST execution model] for more details."
msgstr ""

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "为了测试异步方法，在 `ExtensionsResourceTest` ，添加下面的测试方法。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The `Uni` version is very similar:"
msgstr " `Uni` 版本非常相似。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The `ExtensionsResource` becomes:"
msgstr " `ExtensionsResource` 变成了。"

#. type: Block title
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "叛变"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前面的代码段使用了 Mutiny 反应类型。如果你不熟悉 Mutiny，请查看 xref:mutiny-primer.adoc[Mutiny - 一个直观的反应式编程库] 。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "在返回 `Uni` 时，每次 _订阅_ 都会调用远程服务。这意味着您可以通过在 `Uni` 上重新订阅来重新发送请求，或使用 `retry` ，如下所示："

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr "如果使用 `CompletionStage` ，则需要调用服务的方法来重试。这种差异来自 Mutiny 及其订阅协议的懒惰特性。有关这方面的更多详情，请参阅 link:https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[Mutiny 文档] 。"

#: _versions/main/guides/rest-client.adoc
msgid "Server-Sent Event (SSE) support"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Consuming SSE events is possible simply by declaring the result type as a `io.smallrye.mutiny.Multi`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The simplest example is:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "All the IO involved in streaming the SSE results is done in a non-blocking manner."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Results are not limited to strings - for example when the server returns JSON payload for each event, Quarkus automatically deserializes it into the generic type used in the `Multi`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Users can also access the entire SSE event by using the `org.jboss.resteasy.reactive.client.SseEvent` type."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "A simple example where the event payloads are `Long` values is the following:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Filtering out events"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"On occasion, the stream of SSE events may contain some events that should not be returned by the client - an example of this is having the server send heartbeat events in order to keep the underlying TCP connection open.\n"
"The REST Client supports filtering out such events by providing the `@org.jboss.resteasy.reactive.client.SseEventFilter`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Here is an example of filtering out heartbeat events:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Custom headers support"
msgstr "支持自定义页眉"

#: _versions/main/guides/rest-client.adoc
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "by programmatically registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `QuarkusRestClientBuilder.clientHeadersFactory(factory)` method"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The code below demonstrates how to use each of these techniques:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface. The method can take either no parameters, a single String parameter or a single `io.quarkus.rest.client.reactive.ComputedParamContext` parameter (which is very useful for code that needs to compute headers based on method parameters and naturally complements `@io.quarkus.rest.client.reactive.NotBody`)."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "... as well as a value from your application's configuration"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "... or even any mixture of verbatim text, method parameters (referenced by name), a configuration value (as mentioned previously) and method invocations (as mentioned before)"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "... or as a normal Jakarta REST `@HeaderParam` annotated argument"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.\n"
"See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "如上例所示，通过使用范围定义注解（如 `@Singleton` , `@ApplicationScoped` 等），可以使 `ClientHeadersFactory` 实现成为 CDI Bean。"

#: _versions/main/guides/rest-client.adoc
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"When using HTTP Basic Auth, the `@io.quarkus.rest.client.reactive.ClientBasicAuth` annotation provides a much simpler way of configuring\n"
"the necessary `Authorization` header."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "A very simple example is:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "where `service.username` and `service.password` are configuration properties that must be set at runtime to the username and password that allow access to the service being called."
msgstr ""

#. type: Title ===
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Default header factory"
msgstr "默认的页眉工厂"

#: _versions/main/guides/rest-client.adoc
msgid ""
"The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.\n"
"If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Customizing the request"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The REST Client supports further customization of the final request to be sent to the server via filters. The filters must implement either the interface `ClientRequestFilter` or `ResteasyReactiveClientRequestFilter`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "A simple example of customizing the request would be to add a custom header:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Next, you can register your filter using the `@RegisterProvider` annotation:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Or programmatically using the `.register()` method:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Injecting the `jakarta.ws.rs.ext.Providers` instance in filters"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The `jakarta.ws.rs.ext.Providers` is useful when we need to lookup the provider instances of the current client."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "We can get the `Providers` instance in our filters from the request context as follows:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Alternatively, you can implement the `ResteasyReactiveClientRequestFilter` interface instead of the `ClientRequestFilter` interface that will directly provide the `ResteasyReactiveClientRequestContext` context:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Customizing the ObjectMapper in REST Client Jackson"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The REST Client supports adding a custom ObjectMapper to be used only the Client using the annotation `@ClientObjectMapper`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "A simple example is to provide a custom ObjectMapper to the REST Client Jackson extension by doing:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The method must be annotated with `@ClientObjectMapper`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "It's must be a static method. Also, the parameter `defaultObjectMapper` will be resolved via CDI. If not found, it will throw an exception at runtime."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "In this example, we're creating a copy of the default object mapper. You should *NEVER* modify the default object mapper, but create a copy instead."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Exception handling"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).\n"
"If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client-reactive.provider-autodiscovery` is not set to `false`).\n"
"Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Using @ClientExceptionMapper"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Methods annotated with `@ClientExceptionMapper` can also take a `java.lang.reflect.Method` parameter which is useful if the exception mapping code needs to know the REST Client method that was invoked and caused the exception mapping code to engage."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Using @Blocking annotation in exception mappers"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "In cases that warrant using `InputStream` as the return type of REST Client method (such as when large amounts of data need to be read):"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "This will work as expected, but if you try to read this InputStream object in a custom exception mapper, you will receive a `BlockingNotAllowedException` exception. This is because `ResponseExceptionMapper` classes are run on the Event Loop thread executor by default - which does not allow to perform IO operations."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "To make your exception mapper blocking, you can annotate the exception mapper with the `@Blocking` annotation:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "With the `@Blocking` annotation, the MyResponseExceptionMapper exception mapper will be executed in the worker thread pool."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Reading the entity is now allowed because we're executing the mapper on the worker thread pool."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Note that you can also use the `@Blocking` annotation when using @ClientExceptionMapper:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Multipart Form support"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "REST Client support multipart messages."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Sending Multipart messages"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"REST Client allows sending data as multipart forms. This way you can for example\n"
"send files efficiently."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "To send data as a multipart form, you can just use the regular `@RestForm` (or `@FormParam`) annotations:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"Parameters specified as `File`, `Path`, `byte[]` or `Buffer` are sent as files and default to the\n"
"`application/octet-stream` MIME type. Other `@RestForm` parameter types default to the `text/plain`\n"
"MIME type. You can override these defaults with the `@PartType` annotation."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Naturally, you can also group these parameters into a containing class:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"Any `@RestForm` parameter of the type `File`, `Path`, `byte[]` or `Buffer`, as well as any\n"
"annotated with `@PartType` automatically imply a `@Consumes(MediaType.MULTIPART_FORM_DATA)`\n"
"on the method if there is no `@Consumes` present."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"If there are `@RestForm` parameters that are not multipart-implying, then\n"
"`@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` is implied."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"There are a few modes in which the form data can be encoded. By default,\n"
"REST Client uses RFC1738.\n"
"You can override it by specifying the mode either on the client level,\n"
"by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property\n"
"to the selected value of `HttpPostRequestEncoder.EncoderMode` or\n"
"by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your\n"
"`application.properties`. Please note that the latter works only for\n"
"clients created with the `@RegisterRestClient` annotation.\n"
"All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "You can also send JSON multiparts by specifying the `@PartType` annotation:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Receiving Multipart Messages"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"REST Client also supports receiving multipart messages.\n"
"As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "REST Client needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Multipart mixed / OData usage"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"It is not uncommon that an application has to interact with enterprise systems (like CRM systems) using a special protocol called https://www.odata.org/documentation/odata-version-3-0/batch-processing/[OData].\n"
"This protocol essentially uses a custom HTTP `Content-Type` which needs some glue code to work with the REST Client (creating the body is entirely up to the application - the REST Client can't do much to help)."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "An example looks like the following:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The code uses the following pieces:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`@ClientHeaderParam(name = \"Content-Type\", value = \"{calculateContentType}\")` which ensures that the `Content-Type` header is created by calling the interface's `calculateContentType` default method."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The aforementioned parameter needs to be annotated with `@NotBody` because it is only used to aid the construction of HTTP headers."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`context.methodParameters().get(1).value()` which allows the `calculateContentType` method to obtain the proper method parameter passed to the REST Client method."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "As previously mentioned, the body parameter needs to be properly crafted by the application code to conform to the service's requirements."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Receiving compressed messages"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"REST Client also supports receiving compressed messages using GZIP. You can enable the HTTP compression support by adding the property `quarkus.http.enable-compression=true`.\n"
"When this feature is enabled and a server returns a response that includes the header `Content-Encoding: gzip`, REST Client will automatically decode the content and proceed with the message handling."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Proxy support"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"REST Client supports sending requests through a proxy.\n"
"It honors the JVM settings for it but also allows to specify both:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.\n"
"Otherwise, the client uses the JVM settings."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "An example configuration for setting proxy:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr ""

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, no-wrap
msgid "Package and run the application"
msgstr "打包并运行该应用程序"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "Run the application with:"
msgstr "使用以下命令运行该应用程序:"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr "打开你的浏览器， http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client "

#: _versions/main/guides/rest-client.adoc
msgid "You should see a JSON object containing some basic information about this extension."
msgstr ""

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "As usual, the application can be packaged using:"
msgstr "像往常一样，该应用程序能够使用以下方式进行打包:"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "并通过 `java -jar target/quarkus-app/quarkus-run.jar` 执行。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
msgid "You can also generate the native executable with:"
msgstr "你也可以通过以下命令生成本地可执行文件:"

#: _versions/main/guides/rest-client.adoc
msgid "Logging traffic"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"REST Client can log the requests it sends and the responses it receives.\n"
"To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`request-response` to log the request and response contents, or"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "REST Client is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "An example logging configuration:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "REST Client uses a default `ClientLogger` implementation, which can be swapped out for a custom implementation."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "When setting up the client programmatically using the `QuarkusRestClientBuilder`, the `ClientLogger` is set via the `clientLogger` method."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "For declarative clients using `@RegisterRestClient`, simply providing a CDI bean that implements `ClientLogger` is enough for that logger to be used by said clients."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Mocking the client for tests"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.\n"
"You can do it with Mockito's `@InjectMock` or with `QuarkusMock`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans]."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Mocking does not work when using `@QuarkusIntegrationTest`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Let's assume you have the following client:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Mocking with InjectMock"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "First, add the following dependency to your application:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Then, in your test you can simply use `@InjectMock` to create and inject a mock:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "Mocking with QuarkusMock"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "here we use a manually created implementation of the client interface to replace the actual Client"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method"
msgstr ""

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr "使用模拟HTTP服务器进行测试"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"Setting up a mock HTTP server, against which tests are run, is a common testing pattern.\n"
"Examples of such servers are link:https://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].\n"
"In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr "设置一个模拟 HTTP 服务器，并在该服务器上运行测试，是一种常见的测试模式。这类服务器的例子有 link:https://wiremock.org/[Wiremock] 和 link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly] 。在本节中，我们将演示如何利用 Wiremock 测试上文开发的 `ExtensionsService` 。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr "首先，Wiremock需要被添加为一个测试依赖项。对于一个Maven项目来说，应该这样做。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/org.wiremock/wiremock[here]."
msgstr "使用适当的Wiremock版本。所有可用的版本都可以 link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[在这里] 找到。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n"
"annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n"
"values that Quarkus will use."
msgstr "在 Quarkus 测试中，当需要在 Quarkus 测试运行之前启动某些服务时，我们利用 `@io.quarkus.test.common.QuarkusTestResource` 注解来指定一个 `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` ，它可以启动服务并提供 Quarkus 将使用的配置值。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "For more details about `@QuarkusTestResource` refer to  xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr "关于 `@QuarkusTestResource` 的更多细节，请参考 link:getting-started-testing.html#quarkus-test-resource[这部分文件] 。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr "让我们像这样创建一个名为 `WiremockExtensions` 的 `QuarkusTestResourceLifecycleManager` 的实现。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr "静态导入Wiremock包中的方法，使得阅读测试更容易。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr " `start` 方法在任何测试运行之前被Quarkus调用，并返回在测试执行期间适用的配置属性 `Map` 。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Launch Wiremock."
msgstr "启动Wiremock。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr "配置Wiremock，通过返回一个特定的预制响应来存留对 `/extensions?id=io.quarkus:quarkus-rest-client` 的调用。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr "所有没有被存根的HTTP调用都通过调用真正的服务来处理。这样做是为了演示，因为它通常不会发生在实际测试中。"

#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid ""
"As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation\n"
"of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr "由于 `start` 方法返回的是适用于测试的配置，因此我们将控制基础 URL 的 rest-client 属性（该 URL 用于 `ExtensionsService` 的实现）设置为 Wiremock 正在监听传入请求的基础 URL。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "When all tests have finished, shutdown Wiremock."
msgstr "当所有测试完成后，关闭Wiremock。"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr " `ExtensionsResourceTest` 测试类需要被这样注解。"

#. type: delimited block =
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "`@QuarkusTestResource` applies to all tests, not just `ExtensionsResourceTest`."
msgstr " `@QuarkusTestResource` 适用于所有测试，而不仅仅是 。 `ExtensionsResourceTest` "

#: _versions/main/guides/rest-client.adoc
msgid "Known limitations"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"While the REST Client extension aims to be a drop-in replacement for the RESTEasy Client extension, there are some differences\n"
"and limitations:"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid ""
"the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-resteasy-client` defaults to `@Dependent`\n"
"To change this behavior, set the `quarkus.rest-client-reactive.scope` property to the fully qualified scope name."
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "it is not possible to set `HostnameVerifier` or `SSLContext`"
msgstr ""

#: _versions/main/guides/rest-client.adoc
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr ""

#. type: Title ==
#: _versions/main/guides/rest-client.adoc
#, fuzzy, no-wrap
msgid "Further reading"
msgstr "进一步阅读"

#. type: Plain text
#: _versions/main/guides/rest-client.adoc
#, fuzzy
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[微配置文件休息客户端规范]"

# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-14 02:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/rabbitmq.adoc:6
#, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with RabbitMQ"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:14
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with RabbitMQ."
msgstr "本指南演示了您的 Quarkus 应用程序如何利用 SmallRye响应式消息传递与RabbitMQ进行交互。"

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "先决条件"

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:22
#, no-wrap
msgid "Architecture"
msgstr "应用结构"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:27
msgid "In this guide, we are going to develop two applications communicating with a RabbitMQ broker.  The first application sends a _quote request_ to the RabbitMQ _quote requests_ exchange and consumes messages from the _quote_ queue.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/rabbitmq.adoc:28
#, no-wrap
msgid "Architecture,"
msgstr "应用结构，"

#. type: Target for macro image
#: upstream/_versions/main/guides/rabbitmq.adoc:28
#, no-wrap
msgid "amqp-qs-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:33
msgid "The first application, the `producer`, will let the user request some quotes over an HTTP endpoint.  For each quote request, a random identifier is generated and returned to the user, to put the quote request on _pending_.  At the same time the generated request id is sent to the `quote-requests` exchange."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/rabbitmq.adoc:34
#, no-wrap
msgid "Producer"
msgstr "生产者"

#. type: Target for macro image
#: upstream/_versions/main/guides/rabbitmq.adoc:34
#, no-wrap
msgid "amqp-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:37
msgid "The second application, the `processor`, in turn, will read from the `quote-requests` queue put a random price to the quote, and send it to an exchange named `quotes`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:40
msgid "Lastly, the `producer` will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr "最后， `producer` 将读取报价，并使用服务器发送事件将其发送给浏览器。因此，用户将实时看到报价从 _pending_ 更新为收到的价格。"

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:41
#, no-wrap
msgid "Solution"
msgstr "解决方案"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:45
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr "我们建议你按照下面章节中的说明，一步一步地创建应用程序。但是，你可以直接转到已完成的示例。"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:47
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "克隆 Git 仓库: `git clone {quickstarts-clone-url}` ，或下载一个 {quickstarts-archive-url}[存档] 。"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:49
msgid "The solution is located in the `rabbitmq-quickstart` link:{quickstarts-tree-url}/rabbitmq-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:50
#, no-wrap
msgid "Creating the Maven Project"
msgstr "创建Maven项目"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:53
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr "首先，我们需要创建两个项目： _producer_ 和 _processor_ 。"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:55
msgid "To create the _producer_ project, in a terminal run:"
msgstr "要创建 _producer_ 项目，请在终端中运行："

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:62
msgid "This command creates the project structure and select the two Quarkus extensions we will be using:"
msgstr "这个命令会创建项目结构，并选择我们将要使用的两个Quarkus扩展："

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:64
msgid "The Reactive Messaging RabbitMQ connector"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:65
msgid "RESTEasy Reactive and its Jackson support to handle JSON payloads"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rabbitmq.adoc:70
msgid "If you already have your Quarkus project configured, you can add the `smallrye-reactive-messaging-rabbitmq` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rabbitmq.adoc:75
msgid "This will add the following to your `pom.xml`:"
msgstr "这将在你的 `pom.xml` 中添加以下内容："

#. type: Block title
#: upstream/_versions/main/guides/rabbitmq.adoc:77
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:83
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-reactive-messaging-rabbitmq</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rabbitmq.adoc:86
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:89
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-reactive-messaging-rabbitmq\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/rabbitmq.adoc:93
msgid "To create the _processor_ project, from the same directory, run:"
msgstr "要创建 _processor_ 项目，请在同一目录下运行："

#. type: delimited block =
#: upstream/_versions/main/guides/rabbitmq.adoc:100
msgid "At that point you should have the following structure:"
msgstr "此时，你应该有如下的结构："

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:126
#, no-wrap
msgid ""
".\n"
"├── rabbitmq-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── rabbitmq-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:129
msgid "Open the two projects in your favorite IDE."
msgstr "在你喜欢的IDE中打开这两个项目。"

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:130
#, no-wrap
msgid "The Quote object"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:135
msgid "The `Quote` class will be used in both `producer` and `processor` projects.  For the sake of simplicity we will duplicate the class.  In both projects, create the `src/main/java/org/acme/rabbitmq/model/Quote.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:139
#, no-wrap
msgid "package org.acme.rabbitmq.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:141
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:144
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:147
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:152
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:157
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:166
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:170
msgid "JSON representation of `Quote` objects will be used in messages sent to the RabbitMQ queues and also in the server-sent events sent to browser clients."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:172
msgid "Quarkus has built-in capabilities to deal with JSON RabbitMQ messages."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/rabbitmq.adoc:174
#, no-wrap
msgid "@RegisterForReflection"
msgstr "@RegisterForReflection"

#. type: delimited block =
#: upstream/_versions/main/guides/rabbitmq.adoc:179
msgid "The `@RegisterForReflection` annotation instructs Quarkus to include the class (including fields and methods) when building the native executable.  This will be useful later when we run the applications as native executables inside containers.  Without, the native compilation would remove the fields and methods during the dead-code elimination phase."
msgstr "`@RegisterForReflection` 注释指示Quarkus在构建本地可执行文件时包含类（包括字段和方法）。这在以后我们在容器中作为本地可执行文件运行应用程序时将会很有用。如果没有这个注释，本地编译会在死代码清除阶段删除这些字段和方法。"

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:181
#, no-wrap
msgid "Sending quote request"
msgstr "发送报价请求"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:184
msgid "Inside the `producer` project locate the generated `src/main/java/org/acme/rabbitmq/producer/QuotesResource.java` file, and update the content to be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:188
#, no-wrap
msgid "package org.acme.rabbitmq.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:190
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:196
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:200
#, no-wrap
msgid ""
"import org.acme.rabbitmq.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:202
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:205
#, no-wrap
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:207
#, no-wrap
msgid "    @Channel(\"quote-requests\") Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:221
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" channel (which\n"
"     * maps to the \"quote-requests\" RabbitMQ exchange) using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:223
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr "注入一个响应式消息 `Emitter` ，来向 `quote-requests` 通道发送消息。"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:224
msgid "On a post request, generate a random UUID and send it to the RabbitMQ queue using the emitter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:227
msgid "This channel is mapped to a RabbitMQ exchange using the configuration we will add to the `application.properties` file.  Open the `src/main/resource/application.properties` file and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:233
#, no-wrap
msgid ""
"# Configure the outgoing RabbitMQ exchange `quote-requests`\n"
"mp.messaging.outgoing.quote-requests.connector=smallrye-rabbitmq\n"
"mp.messaging.outgoing.quote-requests.exchange.name=quote-requests\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:237
msgid "All we need to specify is the `smallrye-rabbitmq` connector.  By default, reactive messaging maps the channel name `quote-requests` to the same RabbitMQ exchange name."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:238
#, no-wrap
msgid "Processing quote requests"
msgstr "处理报价请求"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:242
msgid "Now let's consume the quote request and give out a price.  Inside the `processor` project, locate the `src/main/java/org/acme/rabbitmq/processor/QuoteProcessor.java` file and add the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:246
#, no-wrap
msgid "package org.acme.rabbitmq.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:248
#, no-wrap
msgid "import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:250
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:254
#, no-wrap
msgid ""
"import org.acme.rabbitmq.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:256
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:263
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"quote-requests\" RabbitMQ queue and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" RabbitMQ exchange.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuoteProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:265
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:275
#, no-wrap
msgid ""
"    @Incoming(\"requests\")       // <1>\n"
"    @Outgoing(\"quotes\")         // <2>\n"
"    @Blocking                   // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard-working task\n"
"        Thread.sleep(1000);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:277
msgid "Indicates that the method consumes the items from the `requests` channel"
msgstr "表示该方法消费 `requests` 通道中的项"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:278
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel"
msgstr "表示方法返回的对象被发送给 `quotes` 通道"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:279
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr "表示该处理是 _blocking_ ，不能在调用者线程上运行。"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:281
msgid "The `process` method is called for every RabbitMQ message from the `quote-requests` queue, and will send a `Quote` object to the `quotes` exchange."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:284
msgid "As with the previous example we need to configure the connectors in the `application.properties` file.  Open the `src/main/resources/application.properties` file and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:291
#, no-wrap
msgid ""
"# Configure the incoming RabbitMQ queue `quote-requests`\n"
"mp.messaging.incoming.requests.connector=smallrye-rabbitmq\n"
"mp.messaging.incoming.requests.queue.name=quote-requests\n"
"mp.messaging.incoming.requests.exchange.name=quote-requests\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:295
#, no-wrap
msgid ""
"# Configure the outgoing RabbitMQ exchange `quotes`\n"
"mp.messaging.outgoing.quotes.connector=smallrye-rabbitmq\n"
"mp.messaging.outgoing.quotes.exchange.name=quotes\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:299
msgid "Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.  The configuration keys are structured as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:301
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr "`mp.messaging.[outgoing|incoming].{channel-name}.property=value` "

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:303
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr "`channel-name` 片段必须与 `@Incoming` 和 `@Outgoing` 注解中设定的值相匹配:"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:305
msgid "`quote-requests` -> RabbitMQ queue from which we read the quote requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:306
msgid "`quotes` -> RabbitMQ exchange in which we write the quotes"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:307
#, no-wrap
msgid "Receiving quotes"
msgstr "接收报价"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:311
msgid "Back to our `producer` project.  Let's modify the `QuotesResource` to consume quotes, bind it to an HTTP endpoint to send events to clients:"
msgstr "回到我们的 `producer` 项目。让我们修改 `QuotesResource` 来消费报价，将其绑定到一个HTTP端点，来向客户端发送事件："

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:316
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"//...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:318
#, no-wrap
msgid "@Channel(\"quotes\") Multi<Quote> quotes;     // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:327
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" queue and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:329
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr "使用 `@Channel` 修饰符注入 `quotes` 通道"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:330
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr "表示内容是使用 `Server Sent Events` 发送的"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:331
msgid "Returns the stream (_Reactive Stream_)"
msgstr "返回流 (_Reactive Stream_) 。"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:334
msgid "Again we need to configure the incoming `quotes` channel inside `producer` project.  Add the following inside `application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:339
#, no-wrap
msgid ""
"# Configure the outgoing `quote-requests` queue\n"
"mp.messaging.outgoing.quote-requests.connector=smallrye-rabbitmq\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:342
#, no-wrap
msgid ""
"# Configure the incoming `quotes` queue\n"
"mp.messaging.incoming.quotes.connector=smallrye-rabbitmq\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:344
#, no-wrap
msgid "The HTML page"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:347
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr "最后，HTML页面使用SSE读取转换后的价格。"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:349
msgid "Create inside the `producer` project `src/main/resources/META-INF/resources/quotes.html` file, with the following content:"
msgstr "在 `producer` 项目中创建 `src/main/resources/META-INF/resources/quotes.html` 文件，内容如下："

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:353
#, no-wrap
msgid "<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Quotes</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:389
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").append(row);\n"
"        });\n"
"    });\n"
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html(function(index, html) {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:393
msgid "Nothing spectacular here.  On each received quote, it updates the page."
msgstr "这里没有什么特别之处。对于每一个收到的报价，它都会更新页面。"

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:394
#, no-wrap
msgid "Get it running"
msgstr "让它运行起来"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:397
msgid "You just need to run both applications using:"
msgstr "你只需使用以下命令运行这两个应用程序："

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:401
#, no-wrap
msgid "> mvn -f rabbitmq-quickstart-producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:404
msgid "And, in a separate terminal:"
msgstr "并且，在另一台终端中："

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:408
#, no-wrap
msgid "> mvn -f rabbitmq-quickstart-processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:412
msgid "Quarkus starts a RabbitMQ broker automatically, configures the application and shares the broker instance between different applications.  See xref:rabbitmq-dev-services.adoc[Dev Services for RabbitMQ] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:415
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr "在你的浏览器中打开 `http://localhost:8080/quotes.html` ，点击按钮来请求一些报价。"

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:416
#, no-wrap
msgid "Running in JVM or Native mode"
msgstr "在JVM或本地模式下运行"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:420
msgid "When not running in dev or test mode, you will need to start your RabbitMQ broker.  You can follow the instructions from the https://hub.docker.com/_/rabbitmq[RabbitMQ Docker website] or create a `docker-compose.yaml` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:424
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:426
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:433
#, no-wrap
msgid ""
"  rabbit:\n"
"    image: rabbitmq:3.12-management\n"
"    ports:\n"
"      - \"5672:5672\"\n"
"    networks:\n"
"      - rabbitmq-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:446
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/rabbitmq-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: rabbitmq-quickstart-producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      RABBITMQ_HOST: rabbit\n"
"      RABBITMQ_PORT: 5672\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - rabbitmq-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:457
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/rabbitmq-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: rabbitmq-quickstart-processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      RABBITMQ_HOST: rabbit\n"
"      RABBITMQ_PORT: 5672\n"
"    networks:\n"
"      - rabbitmq-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:461
#, no-wrap
msgid ""
"networks:\n"
"  rabbitmq-quickstart-network:\n"
"    name: rabbitmq-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:465
msgid "Note how the RabbitMQ broker location is configured.  The `rabbitmq-host` and `rabbitmq-port` (`AMQP_HOST` and `AMQP_PORT` environment variables) properties configure location."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:468
msgid "First, make sure you stopped the applications, and build both applications in JVM mode with:"
msgstr "首先，确保你停止了应用程序，并在JVM模式下使用以下命令构建这两个应用程序："

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:473
#, no-wrap
msgid ""
"> mvn -f rabbitmq-quickstart-producer clean package\n"
"> mvn -f rabbitmq-quickstart-processor clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:477
msgid "Once packaged, run `docker compose up --build`.  The UI is exposed on http://localhost:8080/quotes.html"
msgstr "一旦打包完成，请运行 `docker compose up --build` 。UI在 http://localhost:8080/quotes.html"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:479
msgid "To run your applications as native, first we need to build the native executables:"
msgstr "要以本地方式运行你的应用程序，我们首先需要构建本地可执行文件："

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:484
#, no-wrap
msgid ""
"> mvn -f rabbitmq-quickstart-producer package -Dnative  -Dquarkus.native.container-build=true\n"
"> mvn -f rabbitmq-quickstart-processor package -Dnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:488
msgid "The `-Dquarkus.native.container-build=true` instructs Quarkus to build Linux 64bits native executables, who can run inside containers.  Then, run the system using:"
msgstr "`-Dquarkus.native.container-build=true` 指示Quarkus构建可以在容器中运行的64位Linux本地可执行文件。然后，使用以下命令运行系统："

#. type: delimited block -
#: upstream/_versions/main/guides/rabbitmq.adoc:493
#, no-wrap
msgid ""
"> export QUARKUS_MODE=native\n"
"> docker compose up --build\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:496
msgid "As before, the UI is exposed on http://localhost:8080/quotes.html"
msgstr "与之前一样，UI也是在 http://localhost:8080/quotes.html"

#. type: Title ==
#: upstream/_versions/main/guides/rabbitmq.adoc:497
#, no-wrap
msgid "Going further"
msgstr "进一步探索"

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:501
msgid "This guide has shown how you can interact with RabbitMQ using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/rabbitmq.adoc:503
msgid "If you did the Kafka, you have realized that it's the same code.  The only difference is the connector configuration and the JSON mapping."
msgstr ""
